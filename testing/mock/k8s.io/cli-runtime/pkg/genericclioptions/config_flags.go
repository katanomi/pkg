// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/cli-runtime/pkg/genericclioptions (interfaces: RESTClientGetter)

// Package genericclioptions is a generated GoMock package.
package genericclioptions

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	clientcmd "k8s.io/client-go/tools/clientcmd"
)

// MockRESTClientGetter is a mock of RESTClientGetter interface.
type MockRESTClientGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRESTClientGetterMockRecorder
}

// MockRESTClientGetterMockRecorder is the mock recorder for MockRESTClientGetter.
type MockRESTClientGetterMockRecorder struct {
	mock *MockRESTClientGetter
}

// NewMockRESTClientGetter creates a new mock instance.
func NewMockRESTClientGetter(ctrl *gomock.Controller) *MockRESTClientGetter {
	mock := &MockRESTClientGetter{ctrl: ctrl}
	mock.recorder = &MockRESTClientGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTClientGetter) EXPECT() *MockRESTClientGetterMockRecorder {
	return m.recorder
}

// ToDiscoveryClient mocks base method.
func (m *MockRESTClientGetter) ToDiscoveryClient() (discovery.CachedDiscoveryInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDiscoveryClient")
	ret0, _ := ret[0].(discovery.CachedDiscoveryInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToDiscoveryClient indicates an expected call of ToDiscoveryClient.
func (mr *MockRESTClientGetterMockRecorder) ToDiscoveryClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDiscoveryClient", reflect.TypeOf((*MockRESTClientGetter)(nil).ToDiscoveryClient))
}

// ToRESTConfig mocks base method.
func (m *MockRESTClientGetter) ToRESTConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTConfig indicates an expected call of ToRESTConfig.
func (mr *MockRESTClientGetterMockRecorder) ToRESTConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTConfig", reflect.TypeOf((*MockRESTClientGetter)(nil).ToRESTConfig))
}

// ToRESTMapper mocks base method.
func (m *MockRESTClientGetter) ToRESTMapper() (meta.RESTMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRESTMapper")
	ret0, _ := ret[0].(meta.RESTMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToRESTMapper indicates an expected call of ToRESTMapper.
func (mr *MockRESTClientGetterMockRecorder) ToRESTMapper() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRESTMapper", reflect.TypeOf((*MockRESTClientGetter)(nil).ToRESTMapper))
}

// ToRawKubeConfigLoader mocks base method.
func (m *MockRESTClientGetter) ToRawKubeConfigLoader() clientcmd.ClientConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToRawKubeConfigLoader")
	ret0, _ := ret[0].(clientcmd.ClientConfig)
	return ret0
}

// ToRawKubeConfigLoader indicates an expected call of ToRawKubeConfigLoader.
func (mr *MockRESTClientGetterMockRecorder) ToRawKubeConfigLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToRawKubeConfigLoader", reflect.TypeOf((*MockRESTClientGetter)(nil).ToRawKubeConfigLoader))
}
