// Code generated by MockGen. DO NOT EDIT.
// Source: knative.dev/pkg/apis (interfaces: ConditionManager)
//
// Generated by this command:
//
//	mockgen -package=apis -destination=../../../testing/mock/knative.dev/pkg/apis/condition_manager.go knative.dev/pkg/apis ConditionManager
//

// Package apis is a generated GoMock package.
package apis

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	apis "knative.dev/pkg/apis"
)

// MockConditionManager is a mock of ConditionManager interface.
type MockConditionManager struct {
	ctrl     *gomock.Controller
	recorder *MockConditionManagerMockRecorder
}

// MockConditionManagerMockRecorder is the mock recorder for MockConditionManager.
type MockConditionManagerMockRecorder struct {
	mock *MockConditionManager
}

// NewMockConditionManager creates a new mock instance.
func NewMockConditionManager(ctrl *gomock.Controller) *MockConditionManager {
	mock := &MockConditionManager{ctrl: ctrl}
	mock.recorder = &MockConditionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionManager) EXPECT() *MockConditionManagerMockRecorder {
	return m.recorder
}

// ClearCondition mocks base method.
func (m *MockConditionManager) ClearCondition(arg0 apis.ConditionType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearCondition", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearCondition indicates an expected call of ClearCondition.
func (mr *MockConditionManagerMockRecorder) ClearCondition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCondition", reflect.TypeOf((*MockConditionManager)(nil).ClearCondition), arg0)
}

// GetCondition mocks base method.
func (m *MockConditionManager) GetCondition(arg0 apis.ConditionType) *apis.Condition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCondition", arg0)
	ret0, _ := ret[0].(*apis.Condition)
	return ret0
}

// GetCondition indicates an expected call of GetCondition.
func (mr *MockConditionManagerMockRecorder) GetCondition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCondition", reflect.TypeOf((*MockConditionManager)(nil).GetCondition), arg0)
}

// GetTopLevelCondition mocks base method.
func (m *MockConditionManager) GetTopLevelCondition() *apis.Condition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopLevelCondition")
	ret0, _ := ret[0].(*apis.Condition)
	return ret0
}

// GetTopLevelCondition indicates an expected call of GetTopLevelCondition.
func (mr *MockConditionManagerMockRecorder) GetTopLevelCondition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopLevelCondition", reflect.TypeOf((*MockConditionManager)(nil).GetTopLevelCondition))
}

// InitializeConditions mocks base method.
func (m *MockConditionManager) InitializeConditions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitializeConditions")
}

// InitializeConditions indicates an expected call of InitializeConditions.
func (mr *MockConditionManagerMockRecorder) InitializeConditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeConditions", reflect.TypeOf((*MockConditionManager)(nil).InitializeConditions))
}

// IsHappy mocks base method.
func (m *MockConditionManager) IsHappy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHappy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHappy indicates an expected call of IsHappy.
func (mr *MockConditionManagerMockRecorder) IsHappy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHappy", reflect.TypeOf((*MockConditionManager)(nil).IsHappy))
}

// MarkFalse mocks base method.
func (m *MockConditionManager) MarkFalse(arg0 apis.ConditionType, arg1, arg2 string, arg3 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MarkFalse", varargs...)
}

// MarkFalse indicates an expected call of MarkFalse.
func (mr *MockConditionManagerMockRecorder) MarkFalse(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFalse", reflect.TypeOf((*MockConditionManager)(nil).MarkFalse), varargs...)
}

// MarkTrue mocks base method.
func (m *MockConditionManager) MarkTrue(arg0 apis.ConditionType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkTrue", arg0)
}

// MarkTrue indicates an expected call of MarkTrue.
func (mr *MockConditionManagerMockRecorder) MarkTrue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTrue", reflect.TypeOf((*MockConditionManager)(nil).MarkTrue), arg0)
}

// MarkTrueWithReason mocks base method.
func (m *MockConditionManager) MarkTrueWithReason(arg0 apis.ConditionType, arg1, arg2 string, arg3 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MarkTrueWithReason", varargs...)
}

// MarkTrueWithReason indicates an expected call of MarkTrueWithReason.
func (mr *MockConditionManagerMockRecorder) MarkTrueWithReason(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTrueWithReason", reflect.TypeOf((*MockConditionManager)(nil).MarkTrueWithReason), varargs...)
}

// MarkUnknown mocks base method.
func (m *MockConditionManager) MarkUnknown(arg0 apis.ConditionType, arg1, arg2 string, arg3 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "MarkUnknown", varargs...)
}

// MarkUnknown indicates an expected call of MarkUnknown.
func (mr *MockConditionManagerMockRecorder) MarkUnknown(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnknown", reflect.TypeOf((*MockConditionManager)(nil).MarkUnknown), varargs...)
}

// SetCondition mocks base method.
func (m *MockConditionManager) SetCondition(arg0 apis.Condition) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCondition", arg0)
}

// SetCondition indicates an expected call of SetCondition.
func (mr *MockConditionManagerMockRecorder) SetCondition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCondition", reflect.TypeOf((*MockConditionManager)(nil).SetCondition), arg0)
}
