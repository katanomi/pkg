// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/sharedmain (interfaces: DefaultingWatcherWithOnChange)

// Package sharedmain is a generated GoMock package.
package sharedmain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	configmap "knative.dev/pkg/configmap"
)

// MockDefaultingWatcherWithOnChange is a mock of DefaultingWatcherWithOnChange interface.
type MockDefaultingWatcherWithOnChange struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultingWatcherWithOnChangeMockRecorder
}

// MockDefaultingWatcherWithOnChangeMockRecorder is the mock recorder for MockDefaultingWatcherWithOnChange.
type MockDefaultingWatcherWithOnChangeMockRecorder struct {
	mock *MockDefaultingWatcherWithOnChange
}

// NewMockDefaultingWatcherWithOnChange creates a new mock instance.
func NewMockDefaultingWatcherWithOnChange(ctrl *gomock.Controller) *MockDefaultingWatcherWithOnChange {
	mock := &MockDefaultingWatcherWithOnChange{ctrl: ctrl}
	mock.recorder = &MockDefaultingWatcherWithOnChangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultingWatcherWithOnChange) EXPECT() *MockDefaultingWatcherWithOnChangeMockRecorder {
	return m.recorder
}

// OnChange mocks base method.
func (m *MockDefaultingWatcherWithOnChange) OnChange(arg0 *v1.ConfigMap) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnChange", arg0)
}

// OnChange indicates an expected call of OnChange.
func (mr *MockDefaultingWatcherWithOnChangeMockRecorder) OnChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnChange", reflect.TypeOf((*MockDefaultingWatcherWithOnChange)(nil).OnChange), arg0)
}

// Start mocks base method.
func (m *MockDefaultingWatcherWithOnChange) Start(arg0 <-chan struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockDefaultingWatcherWithOnChangeMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockDefaultingWatcherWithOnChange)(nil).Start), arg0)
}

// Watch mocks base method.
func (m *MockDefaultingWatcherWithOnChange) Watch(arg0 string, arg1 ...configmap.Observer) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Watch", varargs...)
}

// Watch indicates an expected call of Watch.
func (mr *MockDefaultingWatcherWithOnChangeMockRecorder) Watch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockDefaultingWatcherWithOnChange)(nil).Watch), varargs...)
}

// WatchWithDefault mocks base method.
func (m *MockDefaultingWatcherWithOnChange) WatchWithDefault(arg0 v1.ConfigMap, arg1 ...configmap.Observer) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WatchWithDefault", varargs...)
}

// WatchWithDefault indicates an expected call of WatchWithDefault.
func (mr *MockDefaultingWatcherWithOnChangeMockRecorder) WatchWithDefault(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchWithDefault", reflect.TypeOf((*MockDefaultingWatcherWithOnChange)(nil).WatchWithDefault), varargs...)
}
