// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/conditioner (interfaces: RunConditionerManager)
//
// Generated by this command:
//
//	mockgen -destination=../testing/mock/github.com/katanomi/pkg/conditioner/interface.go -package=mock github.com/katanomi/pkg/conditioner RunConditionerManager
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	conditioner "github.com/katanomi/pkg/conditioner"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRunConditionerManager is a mock of RunConditionerManager interface.
type MockRunConditionerManager struct {
	ctrl     *gomock.Controller
	recorder *MockRunConditionerManagerMockRecorder
}

// MockRunConditionerManagerMockRecorder is the mock recorder for MockRunConditionerManager.
type MockRunConditionerManagerMockRecorder struct {
	mock *MockRunConditionerManager
}

// NewMockRunConditionerManager creates a new mock instance.
func NewMockRunConditionerManager(ctrl *gomock.Controller) *MockRunConditionerManager {
	mock := &MockRunConditionerManager{ctrl: ctrl}
	mock.recorder = &MockRunConditionerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunConditionerManager) EXPECT() *MockRunConditionerManagerMockRecorder {
	return m.recorder
}

// CalculateRunConditons mocks base method.
func (m *MockRunConditionerManager) CalculateRunConditons(arg0 context.Context, arg1 client.Object, arg2 client.ObjectList, arg3 func(client.ObjectList), arg4 []conditioner.RunConditioner) ([]conditioner.RunConditionHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateRunConditons", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]conditioner.RunConditionHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateRunConditons indicates an expected call of CalculateRunConditons.
func (mr *MockRunConditionerManagerMockRecorder) CalculateRunConditons(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateRunConditons", reflect.TypeOf((*MockRunConditionerManager)(nil).CalculateRunConditons), arg0, arg1, arg2, arg3, arg4)
}

// GetAffected mocks base method.
func (m *MockRunConditionerManager) GetAffected(arg0 context.Context, arg1 client.Object, arg2 client.ObjectList, arg3 func(client.ObjectList), arg4 []conditioner.RunConditioner) (map[v1alpha1.RunConditionerType]client.ObjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffected", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[v1alpha1.RunConditionerType]client.ObjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffected indicates an expected call of GetAffected.
func (mr *MockRunConditionerManagerMockRecorder) GetAffected(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffected", reflect.TypeOf((*MockRunConditionerManager)(nil).GetAffected), arg0, arg1, arg2, arg3, arg4)
}
