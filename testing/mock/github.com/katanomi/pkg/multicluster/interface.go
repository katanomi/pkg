// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/multicluster (interfaces: Interface)

// Package multicluster is a generated GoMock package.
package multicluster

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	dynamic "k8s.io/client-go/dynamic"
	rest "k8s.io/client-go/rest"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockInterface) GetClient(arg0 context.Context, arg1 *v1.ObjectReference, arg2 *runtime.Scheme) (client.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(client.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockInterfaceMockRecorder) GetClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockInterface)(nil).GetClient), arg0, arg1, arg2)
}

// GetConfig mocks base method.
func (m *MockInterface) GetConfig(arg0 context.Context, arg1 *v1.ObjectReference) (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockInterfaceMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockInterface)(nil).GetConfig), arg0, arg1)
}

// GetConfigFromCluster mocks base method.
func (m *MockInterface) GetConfigFromCluster(arg0 context.Context, arg1 *unstructured.Unstructured) (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigFromCluster", arg0, arg1)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigFromCluster indicates an expected call of GetConfigFromCluster.
func (mr *MockInterfaceMockRecorder) GetConfigFromCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigFromCluster", reflect.TypeOf((*MockInterface)(nil).GetConfigFromCluster), arg0, arg1)
}

// GetDynamic mocks base method.
func (m *MockInterface) GetDynamic(arg0 context.Context, arg1 *v1.ObjectReference) (dynamic.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynamic", arg0, arg1)
	ret0, _ := ret[0].(dynamic.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDynamic indicates an expected call of GetDynamic.
func (mr *MockInterfaceMockRecorder) GetDynamic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynamic", reflect.TypeOf((*MockInterface)(nil).GetDynamic), arg0, arg1)
}

// GetNamespaceClusters mocks base method.
func (m *MockInterface) GetNamespaceClusters(arg0 context.Context) ([]v1.ObjectReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceClusters", arg0)
	ret0, _ := ret[0].([]v1.ObjectReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceClusters indicates an expected call of GetNamespaceClusters.
func (mr *MockInterfaceMockRecorder) GetNamespaceClusters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceClusters", reflect.TypeOf((*MockInterface)(nil).GetNamespaceClusters), arg0)
}

// ListClustersNamespaces mocks base method.
func (m *MockInterface) ListClustersNamespaces(arg0 context.Context, arg1 string) (map[*v1.ObjectReference][]v1.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClustersNamespaces", arg0, arg1)
	ret0, _ := ret[0].(map[*v1.ObjectReference][]v1.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClustersNamespaces indicates an expected call of ListClustersNamespaces.
func (mr *MockInterfaceMockRecorder) ListClustersNamespaces(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClustersNamespaces", reflect.TypeOf((*MockInterface)(nil).ListClustersNamespaces), arg0, arg1)
}

// StartWarmUpClientCache mocks base method.
func (m *MockInterface) StartWarmUpClientCache(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartWarmUpClientCache", arg0)
}

// StartWarmUpClientCache indicates an expected call of StartWarmUpClientCache.
func (mr *MockInterfaceMockRecorder) StartWarmUpClientCache(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWarmUpClientCache", reflect.TypeOf((*MockInterface)(nil).StartWarmUpClientCache), arg0)
}
