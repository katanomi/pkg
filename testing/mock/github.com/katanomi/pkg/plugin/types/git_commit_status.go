// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: GitCommitStatusLister,GitCommitStatusCreator,GitCommitCommentLister,GitCommitCommentCreator)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/git_commit_status.go github.com/katanomi/pkg/plugin/types GitCommitStatusLister,GitCommitStatusCreator,GitCommitCommentLister,GitCommitCommentCreator
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockGitCommitStatusLister is a mock of GitCommitStatusLister interface.
type MockGitCommitStatusLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommitStatusListerMockRecorder
}

// MockGitCommitStatusListerMockRecorder is the mock recorder for MockGitCommitStatusLister.
type MockGitCommitStatusListerMockRecorder struct {
	mock *MockGitCommitStatusLister
}

// NewMockGitCommitStatusLister creates a new mock instance.
func NewMockGitCommitStatusLister(ctrl *gomock.Controller) *MockGitCommitStatusLister {
	mock := &MockGitCommitStatusLister{ctrl: ctrl}
	mock.recorder = &MockGitCommitStatusListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommitStatusLister) EXPECT() *MockGitCommitStatusListerMockRecorder {
	return m.recorder
}

// ListGitCommitStatus mocks base method.
func (m *MockGitCommitStatusLister) ListGitCommitStatus(arg0 context.Context, arg1 v1alpha1.GitCommitOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitCommitStatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitCommitStatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitStatus indicates an expected call of ListGitCommitStatus.
func (mr *MockGitCommitStatusListerMockRecorder) ListGitCommitStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitStatus", reflect.TypeOf((*MockGitCommitStatusLister)(nil).ListGitCommitStatus), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitCommitStatusLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitCommitStatusListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitCommitStatusLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitCommitStatusLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitCommitStatusListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitCommitStatusLister)(nil).Setup), arg0, arg1)
}

// MockGitCommitStatusCreator is a mock of GitCommitStatusCreator interface.
type MockGitCommitStatusCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommitStatusCreatorMockRecorder
}

// MockGitCommitStatusCreatorMockRecorder is the mock recorder for MockGitCommitStatusCreator.
type MockGitCommitStatusCreatorMockRecorder struct {
	mock *MockGitCommitStatusCreator
}

// NewMockGitCommitStatusCreator creates a new mock instance.
func NewMockGitCommitStatusCreator(ctrl *gomock.Controller) *MockGitCommitStatusCreator {
	mock := &MockGitCommitStatusCreator{ctrl: ctrl}
	mock.recorder = &MockGitCommitStatusCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommitStatusCreator) EXPECT() *MockGitCommitStatusCreatorMockRecorder {
	return m.recorder
}

// CreateGitCommitStatus mocks base method.
func (m *MockGitCommitStatusCreator) CreateGitCommitStatus(arg0 context.Context, arg1 v1alpha1.CreateCommitStatusPayload) (v1alpha1.GitCommitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitStatus", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitCommitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitStatus indicates an expected call of CreateGitCommitStatus.
func (mr *MockGitCommitStatusCreatorMockRecorder) CreateGitCommitStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitStatus", reflect.TypeOf((*MockGitCommitStatusCreator)(nil).CreateGitCommitStatus), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitCommitStatusCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitCommitStatusCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitCommitStatusCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitCommitStatusCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitCommitStatusCreatorMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitCommitStatusCreator)(nil).Setup), arg0, arg1)
}

// MockGitCommitCommentLister is a mock of GitCommitCommentLister interface.
type MockGitCommitCommentLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommitCommentListerMockRecorder
}

// MockGitCommitCommentListerMockRecorder is the mock recorder for MockGitCommitCommentLister.
type MockGitCommitCommentListerMockRecorder struct {
	mock *MockGitCommitCommentLister
}

// NewMockGitCommitCommentLister creates a new mock instance.
func NewMockGitCommitCommentLister(ctrl *gomock.Controller) *MockGitCommitCommentLister {
	mock := &MockGitCommitCommentLister{ctrl: ctrl}
	mock.recorder = &MockGitCommitCommentListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommitCommentLister) EXPECT() *MockGitCommitCommentListerMockRecorder {
	return m.recorder
}

// ListGitCommitComment mocks base method.
func (m *MockGitCommitCommentLister) ListGitCommitComment(arg0 context.Context, arg1 v1alpha1.GitCommitOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitCommitCommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitCommitCommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitComment indicates an expected call of ListGitCommitComment.
func (mr *MockGitCommitCommentListerMockRecorder) ListGitCommitComment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitComment", reflect.TypeOf((*MockGitCommitCommentLister)(nil).ListGitCommitComment), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitCommitCommentLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitCommitCommentListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitCommitCommentLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitCommitCommentLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitCommitCommentListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitCommitCommentLister)(nil).Setup), arg0, arg1)
}

// MockGitCommitCommentCreator is a mock of GitCommitCommentCreator interface.
type MockGitCommitCommentCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitCommitCommentCreatorMockRecorder
}

// MockGitCommitCommentCreatorMockRecorder is the mock recorder for MockGitCommitCommentCreator.
type MockGitCommitCommentCreatorMockRecorder struct {
	mock *MockGitCommitCommentCreator
}

// NewMockGitCommitCommentCreator creates a new mock instance.
func NewMockGitCommitCommentCreator(ctrl *gomock.Controller) *MockGitCommitCommentCreator {
	mock := &MockGitCommitCommentCreator{ctrl: ctrl}
	mock.recorder = &MockGitCommitCommentCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitCommitCommentCreator) EXPECT() *MockGitCommitCommentCreatorMockRecorder {
	return m.recorder
}

// CreateGitCommitComment mocks base method.
func (m *MockGitCommitCommentCreator) CreateGitCommitComment(arg0 context.Context, arg1 v1alpha1.CreateCommitCommentPayload) (v1alpha1.GitCommitComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitCommitComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitComment indicates an expected call of CreateGitCommitComment.
func (mr *MockGitCommitCommentCreatorMockRecorder) CreateGitCommitComment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitComment", reflect.TypeOf((*MockGitCommitCommentCreator)(nil).CreateGitCommitComment), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitCommitCommentCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitCommitCommentCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitCommitCommentCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitCommitCommentCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitCommitCommentCreatorMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitCommitCommentCreator)(nil).Setup), arg0, arg1)
}
