// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: ProjectUserLister)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/project_user.go github.com/katanomi/pkg/plugin/types ProjectUserLister
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockProjectUserLister is a mock of ProjectUserLister interface.
type MockProjectUserLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectUserListerMockRecorder
}

// MockProjectUserListerMockRecorder is the mock recorder for MockProjectUserLister.
type MockProjectUserListerMockRecorder struct {
	mock *MockProjectUserLister
}

// NewMockProjectUserLister creates a new mock instance.
func NewMockProjectUserLister(ctrl *gomock.Controller) *MockProjectUserLister {
	mock := &MockProjectUserLister{ctrl: ctrl}
	mock.recorder = &MockProjectUserListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectUserLister) EXPECT() *MockProjectUserListerMockRecorder {
	return m.recorder
}

// ListProjectUsers mocks base method.
func (m *MockProjectUserLister) ListProjectUsers(arg0 context.Context, arg1 v1alpha1.UserOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectUsers indicates an expected call of ListProjectUsers.
func (mr *MockProjectUserListerMockRecorder) ListProjectUsers(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectUsers", reflect.TypeOf((*MockProjectUserLister)(nil).ListProjectUsers), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockProjectUserLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectUserListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectUserLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectUserLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectUserListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectUserLister)(nil).Setup), arg0, arg1)
}
