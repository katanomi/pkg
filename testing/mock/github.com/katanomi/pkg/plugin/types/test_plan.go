// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: TestPlanLister,TestPlanGetter)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockTestPlanLister is a mock of TestPlanLister interface.
type MockTestPlanLister struct {
	ctrl     *gomock.Controller
	recorder *MockTestPlanListerMockRecorder
}

// MockTestPlanListerMockRecorder is the mock recorder for MockTestPlanLister.
type MockTestPlanListerMockRecorder struct {
	mock *MockTestPlanLister
}

// NewMockTestPlanLister creates a new mock instance.
func NewMockTestPlanLister(ctrl *gomock.Controller) *MockTestPlanLister {
	mock := &MockTestPlanLister{ctrl: ctrl}
	mock.recorder = &MockTestPlanListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestPlanLister) EXPECT() *MockTestPlanListerMockRecorder {
	return m.recorder
}

// ListTestPlans mocks base method.
func (m *MockTestPlanLister) ListTestPlans(arg0 context.Context, arg1 v1alpha1.TestProjectOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.TestPlanList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestPlans", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.TestPlanList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestPlans indicates an expected call of ListTestPlans.
func (mr *MockTestPlanListerMockRecorder) ListTestPlans(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestPlans", reflect.TypeOf((*MockTestPlanLister)(nil).ListTestPlans), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockTestPlanLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestPlanListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestPlanLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestPlanLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestPlanListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestPlanLister)(nil).Setup), arg0, arg1)
}

// MockTestPlanGetter is a mock of TestPlanGetter interface.
type MockTestPlanGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTestPlanGetterMockRecorder
}

// MockTestPlanGetterMockRecorder is the mock recorder for MockTestPlanGetter.
type MockTestPlanGetterMockRecorder struct {
	mock *MockTestPlanGetter
}

// NewMockTestPlanGetter creates a new mock instance.
func NewMockTestPlanGetter(ctrl *gomock.Controller) *MockTestPlanGetter {
	mock := &MockTestPlanGetter{ctrl: ctrl}
	mock.recorder = &MockTestPlanGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestPlanGetter) EXPECT() *MockTestPlanGetterMockRecorder {
	return m.recorder
}

// GetTestPlan mocks base method.
func (m *MockTestPlanGetter) GetTestPlan(arg0 context.Context, arg1 v1alpha1.TestProjectOptions) (*v1alpha1.TestPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestPlan", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.TestPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestPlan indicates an expected call of GetTestPlan.
func (mr *MockTestPlanGetterMockRecorder) GetTestPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestPlan", reflect.TypeOf((*MockTestPlanGetter)(nil).GetTestPlan), arg0, arg1)
}

// Path mocks base method.
func (m *MockTestPlanGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestPlanGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestPlanGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestPlanGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestPlanGetterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestPlanGetter)(nil).Setup), arg0, arg1)
}
