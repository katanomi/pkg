// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: TestCaseLister,TestCaseGetter,TestCaseExecutionLister,TestCaseExecutionCreator)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockTestCaseLister is a mock of TestCaseLister interface.
type MockTestCaseLister struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseListerMockRecorder
}

// MockTestCaseListerMockRecorder is the mock recorder for MockTestCaseLister.
type MockTestCaseListerMockRecorder struct {
	mock *MockTestCaseLister
}

// NewMockTestCaseLister creates a new mock instance.
func NewMockTestCaseLister(ctrl *gomock.Controller) *MockTestCaseLister {
	mock := &MockTestCaseLister{ctrl: ctrl}
	mock.recorder = &MockTestCaseListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseLister) EXPECT() *MockTestCaseListerMockRecorder {
	return m.recorder
}

// ListTestCases mocks base method.
func (m *MockTestCaseLister) ListTestCases(arg0 context.Context, arg1 v1alpha1.TestProjectOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.TestCaseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCases", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.TestCaseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCases indicates an expected call of ListTestCases.
func (mr *MockTestCaseListerMockRecorder) ListTestCases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCases", reflect.TypeOf((*MockTestCaseLister)(nil).ListTestCases), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockTestCaseLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestCaseListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestCaseLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestCaseLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestCaseListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestCaseLister)(nil).Setup), arg0, arg1)
}

// MockTestCaseGetter is a mock of TestCaseGetter interface.
type MockTestCaseGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseGetterMockRecorder
}

// MockTestCaseGetterMockRecorder is the mock recorder for MockTestCaseGetter.
type MockTestCaseGetterMockRecorder struct {
	mock *MockTestCaseGetter
}

// NewMockTestCaseGetter creates a new mock instance.
func NewMockTestCaseGetter(ctrl *gomock.Controller) *MockTestCaseGetter {
	mock := &MockTestCaseGetter{ctrl: ctrl}
	mock.recorder = &MockTestCaseGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseGetter) EXPECT() *MockTestCaseGetterMockRecorder {
	return m.recorder
}

// GetTestCase mocks base method.
func (m *MockTestCaseGetter) GetTestCase(arg0 context.Context, arg1 v1alpha1.TestProjectOptions) (*v1alpha1.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCase", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCase indicates an expected call of GetTestCase.
func (mr *MockTestCaseGetterMockRecorder) GetTestCase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCase", reflect.TypeOf((*MockTestCaseGetter)(nil).GetTestCase), arg0, arg1)
}

// Path mocks base method.
func (m *MockTestCaseGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestCaseGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestCaseGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestCaseGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestCaseGetterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestCaseGetter)(nil).Setup), arg0, arg1)
}

// MockTestCaseExecutionLister is a mock of TestCaseExecutionLister interface.
type MockTestCaseExecutionLister struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseExecutionListerMockRecorder
}

// MockTestCaseExecutionListerMockRecorder is the mock recorder for MockTestCaseExecutionLister.
type MockTestCaseExecutionListerMockRecorder struct {
	mock *MockTestCaseExecutionLister
}

// NewMockTestCaseExecutionLister creates a new mock instance.
func NewMockTestCaseExecutionLister(ctrl *gomock.Controller) *MockTestCaseExecutionLister {
	mock := &MockTestCaseExecutionLister{ctrl: ctrl}
	mock.recorder = &MockTestCaseExecutionListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseExecutionLister) EXPECT() *MockTestCaseExecutionListerMockRecorder {
	return m.recorder
}

// ListTestCaseExecutions mocks base method.
func (m *MockTestCaseExecutionLister) ListTestCaseExecutions(arg0 context.Context, arg1 v1alpha1.TestProjectOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.TestCaseExecutionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCaseExecutions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.TestCaseExecutionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCaseExecutions indicates an expected call of ListTestCaseExecutions.
func (mr *MockTestCaseExecutionListerMockRecorder) ListTestCaseExecutions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCaseExecutions", reflect.TypeOf((*MockTestCaseExecutionLister)(nil).ListTestCaseExecutions), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockTestCaseExecutionLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestCaseExecutionListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestCaseExecutionLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestCaseExecutionLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestCaseExecutionListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestCaseExecutionLister)(nil).Setup), arg0, arg1)
}

// MockTestCaseExecutionCreator is a mock of TestCaseExecutionCreator interface.
type MockTestCaseExecutionCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTestCaseExecutionCreatorMockRecorder
}

// MockTestCaseExecutionCreatorMockRecorder is the mock recorder for MockTestCaseExecutionCreator.
type MockTestCaseExecutionCreatorMockRecorder struct {
	mock *MockTestCaseExecutionCreator
}

// NewMockTestCaseExecutionCreator creates a new mock instance.
func NewMockTestCaseExecutionCreator(ctrl *gomock.Controller) *MockTestCaseExecutionCreator {
	mock := &MockTestCaseExecutionCreator{ctrl: ctrl}
	mock.recorder = &MockTestCaseExecutionCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestCaseExecutionCreator) EXPECT() *MockTestCaseExecutionCreatorMockRecorder {
	return m.recorder
}

// CreateTestCaseExecution mocks base method.
func (m *MockTestCaseExecutionCreator) CreateTestCaseExecution(arg0 context.Context, arg1 v1alpha1.TestProjectOptions, arg2 v1alpha1.TestCaseExecution) (*v1alpha1.TestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCaseExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.TestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestCaseExecution indicates an expected call of CreateTestCaseExecution.
func (mr *MockTestCaseExecutionCreatorMockRecorder) CreateTestCaseExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCaseExecution", reflect.TypeOf((*MockTestCaseExecutionCreator)(nil).CreateTestCaseExecution), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockTestCaseExecutionCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockTestCaseExecutionCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockTestCaseExecutionCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockTestCaseExecutionCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockTestCaseExecutionCreatorMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockTestCaseExecutionCreator)(nil).Setup), arg0, arg1)
}
