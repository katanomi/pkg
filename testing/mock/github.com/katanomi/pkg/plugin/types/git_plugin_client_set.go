// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: GitPluginClientSet)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/coderepository/v1alpha1"
	v1alpha10 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockGitPluginClientSet is a mock of GitPluginClientSet interface.
type MockGitPluginClientSet struct {
	ctrl     *gomock.Controller
	recorder *MockGitPluginClientSetMockRecorder
}

// MockGitPluginClientSetMockRecorder is the mock recorder for MockGitPluginClientSet.
type MockGitPluginClientSetMockRecorder struct {
	mock *MockGitPluginClientSet
}

// NewMockGitPluginClientSet creates a new mock instance.
func NewMockGitPluginClientSet(ctrl *gomock.Controller) *MockGitPluginClientSet {
	mock := &MockGitPluginClientSet{ctrl: ctrl}
	mock.recorder = &MockGitPluginClientSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPluginClientSet) EXPECT() *MockGitPluginClientSetMockRecorder {
	return m.recorder
}

// CreateGitBranch mocks base method.
func (m *MockGitPluginClientSet) CreateGitBranch(arg0 context.Context, arg1 v1alpha10.CreateBranchPayload) (v1alpha10.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitBranch", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitBranch indicates an expected call of CreateGitBranch.
func (mr *MockGitPluginClientSetMockRecorder) CreateGitBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitBranch", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreateGitBranch), arg0, arg1)
}

// CreateGitCommit mocks base method.
func (m *MockGitPluginClientSet) CreateGitCommit(arg0 context.Context, arg1 v1alpha1.CreateGitCommitOption) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommit", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommit indicates an expected call of CreateGitCommit.
func (mr *MockGitPluginClientSetMockRecorder) CreateGitCommit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommit", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreateGitCommit), arg0, arg1)
}

// CreateGitCommitComment mocks base method.
func (m *MockGitPluginClientSet) CreateGitCommitComment(arg0 context.Context, arg1 v1alpha10.CreateCommitCommentPayload) (v1alpha10.GitCommitComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommitComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitComment indicates an expected call of CreateGitCommitComment.
func (mr *MockGitPluginClientSetMockRecorder) CreateGitCommitComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitComment", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreateGitCommitComment), arg0, arg1)
}

// CreateGitCommitStatus mocks base method.
func (m *MockGitPluginClientSet) CreateGitCommitStatus(arg0 context.Context, arg1 v1alpha10.CreateCommitStatusPayload) (v1alpha10.GitCommitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitStatus", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitStatus indicates an expected call of CreateGitCommitStatus.
func (mr *MockGitPluginClientSetMockRecorder) CreateGitCommitStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitStatus", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreateGitCommitStatus), arg0, arg1)
}

// CreateGitRepoFile mocks base method.
func (m *MockGitPluginClientSet) CreateGitRepoFile(arg0 context.Context, arg1 v1alpha10.CreateRepoFilePayload) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepoFile", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepoFile indicates an expected call of CreateGitRepoFile.
func (mr *MockGitPluginClientSetMockRecorder) CreateGitRepoFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepoFile", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreateGitRepoFile), arg0, arg1)
}

// CreatePullRequest mocks base method.
func (m *MockGitPluginClientSet) CreatePullRequest(arg0 context.Context, arg1 v1alpha10.CreatePullRequestPayload) (v1alpha10.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGitPluginClientSetMockRecorder) CreatePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreatePullRequest), arg0, arg1)
}

// CreatePullRequestComment mocks base method.
func (m *MockGitPluginClientSet) CreatePullRequestComment(arg0 context.Context, arg1 v1alpha10.CreatePullRequestCommentPayload) (v1alpha10.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestComment indicates an expected call of CreatePullRequestComment.
func (mr *MockGitPluginClientSetMockRecorder) CreatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestComment", reflect.TypeOf((*MockGitPluginClientSet)(nil).CreatePullRequestComment), arg0, arg1)
}

// GetGitBranch mocks base method.
func (m *MockGitPluginClientSet) GetGitBranch(arg0 context.Context, arg1 v1alpha10.GitRepo, arg2 string) (v1alpha10.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitBranch indicates an expected call of GetGitBranch.
func (mr *MockGitPluginClientSetMockRecorder) GetGitBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitBranch", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitBranch), arg0, arg1, arg2)
}

// GetGitCommit mocks base method.
func (m *MockGitPluginClientSet) GetGitCommit(arg0 context.Context, arg1 v1alpha10.GitCommitOption) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitCommit", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitCommit indicates an expected call of GetGitCommit.
func (mr *MockGitPluginClientSetMockRecorder) GetGitCommit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitCommit", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitCommit), arg0, arg1)
}

// GetGitPullRequest mocks base method.
func (m *MockGitPluginClientSet) GetGitPullRequest(arg0 context.Context, arg1 v1alpha10.GitPullRequestOption) (v1alpha10.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitPullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitPullRequest indicates an expected call of GetGitPullRequest.
func (mr *MockGitPluginClientSetMockRecorder) GetGitPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitPullRequest", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitPullRequest), arg0, arg1)
}

// GetGitRepoFile mocks base method.
func (m *MockGitPluginClientSet) GetGitRepoFile(arg0 context.Context, arg1 v1alpha10.GitRepoFileOption) (v1alpha10.GitRepoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepoFile", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepoFile indicates an expected call of GetGitRepoFile.
func (mr *MockGitPluginClientSetMockRecorder) GetGitRepoFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepoFile", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitRepoFile), arg0, arg1)
}

// GetGitRepository mocks base method.
func (m *MockGitPluginClientSet) GetGitRepository(arg0 context.Context, arg1 v1alpha10.GitRepo) (v1alpha10.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepository", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepository indicates an expected call of GetGitRepository.
func (mr *MockGitPluginClientSetMockRecorder) GetGitRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepository", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitRepository), arg0, arg1)
}

// GetGitRepositoryFileTree mocks base method.
func (m *MockGitPluginClientSet) GetGitRepositoryFileTree(arg0 context.Context, arg1 v1alpha10.GitRepoFileTreeOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitRepositoryFileTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoryFileTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryFileTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoryFileTree indicates an expected call of GetGitRepositoryFileTree.
func (mr *MockGitPluginClientSetMockRecorder) GetGitRepositoryFileTree(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoryFileTree", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitRepositoryFileTree), arg0, arg1, arg2)
}

// GetGitRepositoryTag mocks base method.
func (m *MockGitPluginClientSet) GetGitRepositoryTag(arg0 context.Context, arg1 v1alpha10.GitTag) (v1alpha10.GitRepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoryTag", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoryTag indicates an expected call of GetGitRepositoryTag.
func (mr *MockGitPluginClientSetMockRecorder) GetGitRepositoryTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoryTag", reflect.TypeOf((*MockGitPluginClientSet)(nil).GetGitRepositoryTag), arg0, arg1)
}

// ListGitBranch mocks base method.
func (m *MockGitPluginClientSet) ListGitBranch(arg0 context.Context, arg1 v1alpha10.GitBranchOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitBranchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitBranchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitBranch indicates an expected call of ListGitBranch.
func (mr *MockGitPluginClientSetMockRecorder) ListGitBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitBranch", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitBranch), arg0, arg1, arg2)
}

// ListGitCommit mocks base method.
func (m *MockGitPluginClientSet) ListGitCommit(arg0 context.Context, arg1 v1alpha10.GitCommitListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommit indicates an expected call of ListGitCommit.
func (mr *MockGitPluginClientSetMockRecorder) ListGitCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommit", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitCommit), arg0, arg1, arg2)
}

// ListGitCommitComment mocks base method.
func (m *MockGitPluginClientSet) ListGitCommitComment(arg0 context.Context, arg1 v1alpha10.GitCommitOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitCommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitCommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitComment indicates an expected call of ListGitCommitComment.
func (mr *MockGitPluginClientSetMockRecorder) ListGitCommitComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitComment", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitCommitComment), arg0, arg1, arg2)
}

// ListGitCommitStatus mocks base method.
func (m *MockGitPluginClientSet) ListGitCommitStatus(arg0 context.Context, arg1 v1alpha10.GitCommitOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitStatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitStatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitStatus indicates an expected call of ListGitCommitStatus.
func (mr *MockGitPluginClientSetMockRecorder) ListGitCommitStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitStatus", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitCommitStatus), arg0, arg1, arg2)
}

// ListGitPullRequest mocks base method.
func (m *MockGitPluginClientSet) ListGitPullRequest(arg0 context.Context, arg1 v1alpha10.GitPullRequestListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitPullRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitPullRequest indicates an expected call of ListGitPullRequest.
func (mr *MockGitPluginClientSetMockRecorder) ListGitPullRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitPullRequest", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitPullRequest), arg0, arg1, arg2)
}

// ListGitRepository mocks base method.
func (m *MockGitPluginClientSet) ListGitRepository(arg0 context.Context, arg1, arg2 string, arg3 v1alpha10.ProjectSubType, arg4 v1alpha10.ListOptions) (v1alpha10.GitRepositoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepository", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepository indicates an expected call of ListGitRepository.
func (mr *MockGitPluginClientSetMockRecorder) ListGitRepository(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepository", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitRepository), arg0, arg1, arg2, arg3, arg4)
}

// ListGitRepositoryTag mocks base method.
func (m *MockGitPluginClientSet) ListGitRepositoryTag(arg0 context.Context, arg1 v1alpha10.GitRepositoryTagListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitRepositoryTagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepositoryTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryTagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepositoryTag indicates an expected call of ListGitRepositoryTag.
func (mr *MockGitPluginClientSetMockRecorder) ListGitRepositoryTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepositoryTag", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListGitRepositoryTag), arg0, arg1, arg2)
}

// ListPullRequestComment mocks base method.
func (m *MockGitPluginClientSet) ListPullRequestComment(arg0 context.Context, arg1 v1alpha10.GitPullRequestOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitPullRequestNoteList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComment indicates an expected call of ListPullRequestComment.
func (mr *MockGitPluginClientSetMockRecorder) ListPullRequestComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComment", reflect.TypeOf((*MockGitPluginClientSet)(nil).ListPullRequestComment), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitPluginClientSet) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPluginClientSetMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPluginClientSet)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPluginClientSet) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPluginClientSetMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPluginClientSet)(nil).Setup), arg0, arg1)
}

// UpdatePullRequestComment mocks base method.
func (m *MockGitPluginClientSet) UpdatePullRequestComment(arg0 context.Context, arg1 v1alpha10.UpdatePullRequestCommentPayload) (v1alpha10.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestComment indicates an expected call of UpdatePullRequestComment.
func (mr *MockGitPluginClientSetMockRecorder) UpdatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestComment", reflect.TypeOf((*MockGitPluginClientSet)(nil).UpdatePullRequestComment), arg0, arg1)
}
