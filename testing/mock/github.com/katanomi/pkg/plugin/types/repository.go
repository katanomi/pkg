// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: RepositoryLister,RepositoryGetter)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockRepositoryLister is a mock of RepositoryLister interface.
type MockRepositoryLister struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryListerMockRecorder
}

// MockRepositoryListerMockRecorder is the mock recorder for MockRepositoryLister.
type MockRepositoryListerMockRecorder struct {
	mock *MockRepositoryLister
}

// NewMockRepositoryLister creates a new mock instance.
func NewMockRepositoryLister(ctrl *gomock.Controller) *MockRepositoryLister {
	mock := &MockRepositoryLister{ctrl: ctrl}
	mock.recorder = &MockRepositoryListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryLister) EXPECT() *MockRepositoryListerMockRecorder {
	return m.recorder
}

// ListRepositories mocks base method.
func (m *MockRepositoryLister) ListRepositories(arg0 context.Context, arg1 v1alpha1.RepositoryOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.RepositoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRepositoryListerMockRecorder) ListRepositories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRepositoryLister)(nil).ListRepositories), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockRepositoryLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockRepositoryListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockRepositoryLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockRepositoryLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockRepositoryListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockRepositoryLister)(nil).Setup), arg0, arg1)
}

// MockRepositoryGetter is a mock of RepositoryGetter interface.
type MockRepositoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryGetterMockRecorder
}

// MockRepositoryGetterMockRecorder is the mock recorder for MockRepositoryGetter.
type MockRepositoryGetterMockRecorder struct {
	mock *MockRepositoryGetter
}

// NewMockRepositoryGetter creates a new mock instance.
func NewMockRepositoryGetter(ctrl *gomock.Controller) *MockRepositoryGetter {
	mock := &MockRepositoryGetter{ctrl: ctrl}
	mock.recorder = &MockRepositoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryGetter) EXPECT() *MockRepositoryGetterMockRecorder {
	return m.recorder
}

// GetRepository mocks base method.
func (m *MockRepositoryGetter) GetRepository(arg0 context.Context, arg1 v1alpha1.RepositoryOptions) (*v1alpha1.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRepositoryGetterMockRecorder) GetRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRepositoryGetter)(nil).GetRepository), arg0, arg1)
}

// Path mocks base method.
func (m *MockRepositoryGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockRepositoryGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockRepositoryGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockRepositoryGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockRepositoryGetterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockRepositoryGetter)(nil).Setup), arg0, arg1)
}
