// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: ArtifactLister,ArtifactGetter,ArtifactDeleter,ProjectArtifactLister,ProjectArtifactGetter,ProjectArtifactDeleter,ProjectArtifactUploader,ProjectArtifactFileGetter,ArtifactTagDeleter,ArtifactTriggerRegister)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/artifact.go github.com/katanomi/pkg/plugin/types ArtifactLister,ArtifactGetter,ArtifactDeleter,ProjectArtifactLister,ProjectArtifactGetter,ProjectArtifactDeleter,ProjectArtifactUploader,ProjectArtifactFileGetter,ArtifactTagDeleter,ArtifactTriggerRegister
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	io "io"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockArtifactLister is a mock of ArtifactLister interface.
type MockArtifactLister struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactListerMockRecorder
}

// MockArtifactListerMockRecorder is the mock recorder for MockArtifactLister.
type MockArtifactListerMockRecorder struct {
	mock *MockArtifactLister
}

// NewMockArtifactLister creates a new mock instance.
func NewMockArtifactLister(ctrl *gomock.Controller) *MockArtifactLister {
	mock := &MockArtifactLister{ctrl: ctrl}
	mock.recorder = &MockArtifactListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactLister) EXPECT() *MockArtifactListerMockRecorder {
	return m.recorder
}

// ListArtifacts mocks base method.
func (m *MockArtifactLister) ListArtifacts(arg0 context.Context, arg1 v1alpha1.ArtifactOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.ArtifactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ArtifactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockArtifactListerMockRecorder) ListArtifacts(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockArtifactLister)(nil).ListArtifacts), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockArtifactLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockArtifactListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockArtifactLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockArtifactLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockArtifactListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockArtifactLister)(nil).Setup), arg0, arg1)
}

// MockArtifactGetter is a mock of ArtifactGetter interface.
type MockArtifactGetter struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactGetterMockRecorder
}

// MockArtifactGetterMockRecorder is the mock recorder for MockArtifactGetter.
type MockArtifactGetterMockRecorder struct {
	mock *MockArtifactGetter
}

// NewMockArtifactGetter creates a new mock instance.
func NewMockArtifactGetter(ctrl *gomock.Controller) *MockArtifactGetter {
	mock := &MockArtifactGetter{ctrl: ctrl}
	mock.recorder = &MockArtifactGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactGetter) EXPECT() *MockArtifactGetterMockRecorder {
	return m.recorder
}

// GetArtifact mocks base method.
func (m *MockArtifactGetter) GetArtifact(arg0 context.Context, arg1 v1alpha1.ArtifactOptions) (*v1alpha1.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockArtifactGetterMockRecorder) GetArtifact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockArtifactGetter)(nil).GetArtifact), arg0, arg1)
}

// Path mocks base method.
func (m *MockArtifactGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockArtifactGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockArtifactGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockArtifactGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockArtifactGetterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockArtifactGetter)(nil).Setup), arg0, arg1)
}

// MockArtifactDeleter is a mock of ArtifactDeleter interface.
type MockArtifactDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactDeleterMockRecorder
}

// MockArtifactDeleterMockRecorder is the mock recorder for MockArtifactDeleter.
type MockArtifactDeleterMockRecorder struct {
	mock *MockArtifactDeleter
}

// NewMockArtifactDeleter creates a new mock instance.
func NewMockArtifactDeleter(ctrl *gomock.Controller) *MockArtifactDeleter {
	mock := &MockArtifactDeleter{ctrl: ctrl}
	mock.recorder = &MockArtifactDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactDeleter) EXPECT() *MockArtifactDeleterMockRecorder {
	return m.recorder
}

// DeleteArtifact mocks base method.
func (m *MockArtifactDeleter) DeleteArtifact(arg0 context.Context, arg1 v1alpha1.ArtifactOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockArtifactDeleterMockRecorder) DeleteArtifact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockArtifactDeleter)(nil).DeleteArtifact), arg0, arg1)
}

// Path mocks base method.
func (m *MockArtifactDeleter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockArtifactDeleterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockArtifactDeleter)(nil).Path))
}

// Setup mocks base method.
func (m *MockArtifactDeleter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockArtifactDeleterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockArtifactDeleter)(nil).Setup), arg0, arg1)
}

// MockProjectArtifactLister is a mock of ProjectArtifactLister interface.
type MockProjectArtifactLister struct {
	ctrl     *gomock.Controller
	recorder *MockProjectArtifactListerMockRecorder
}

// MockProjectArtifactListerMockRecorder is the mock recorder for MockProjectArtifactLister.
type MockProjectArtifactListerMockRecorder struct {
	mock *MockProjectArtifactLister
}

// NewMockProjectArtifactLister creates a new mock instance.
func NewMockProjectArtifactLister(ctrl *gomock.Controller) *MockProjectArtifactLister {
	mock := &MockProjectArtifactLister{ctrl: ctrl}
	mock.recorder = &MockProjectArtifactListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectArtifactLister) EXPECT() *MockProjectArtifactListerMockRecorder {
	return m.recorder
}

// ListProjectArtifacts mocks base method.
func (m *MockProjectArtifactLister) ListProjectArtifacts(arg0 context.Context, arg1 v1alpha1.ArtifactOptions, arg2 v1alpha1.ListOptions) (*v1alpha1.ArtifactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectArtifacts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha1.ArtifactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectArtifacts indicates an expected call of ListProjectArtifacts.
func (mr *MockProjectArtifactListerMockRecorder) ListProjectArtifacts(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectArtifacts", reflect.TypeOf((*MockProjectArtifactLister)(nil).ListProjectArtifacts), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockProjectArtifactLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectArtifactListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectArtifactLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectArtifactLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectArtifactListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectArtifactLister)(nil).Setup), arg0, arg1)
}

// MockProjectArtifactGetter is a mock of ProjectArtifactGetter interface.
type MockProjectArtifactGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectArtifactGetterMockRecorder
}

// MockProjectArtifactGetterMockRecorder is the mock recorder for MockProjectArtifactGetter.
type MockProjectArtifactGetterMockRecorder struct {
	mock *MockProjectArtifactGetter
}

// NewMockProjectArtifactGetter creates a new mock instance.
func NewMockProjectArtifactGetter(ctrl *gomock.Controller) *MockProjectArtifactGetter {
	mock := &MockProjectArtifactGetter{ctrl: ctrl}
	mock.recorder = &MockProjectArtifactGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectArtifactGetter) EXPECT() *MockProjectArtifactGetterMockRecorder {
	return m.recorder
}

// GetProjectArtifact mocks base method.
func (m *MockProjectArtifactGetter) GetProjectArtifact(arg0 context.Context, arg1 v1alpha1.ProjectArtifactOptions) (*v1alpha1.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectArtifact", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectArtifact indicates an expected call of GetProjectArtifact.
func (mr *MockProjectArtifactGetterMockRecorder) GetProjectArtifact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectArtifact", reflect.TypeOf((*MockProjectArtifactGetter)(nil).GetProjectArtifact), arg0, arg1)
}

// Path mocks base method.
func (m *MockProjectArtifactGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectArtifactGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectArtifactGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectArtifactGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectArtifactGetterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectArtifactGetter)(nil).Setup), arg0, arg1)
}

// MockProjectArtifactDeleter is a mock of ProjectArtifactDeleter interface.
type MockProjectArtifactDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectArtifactDeleterMockRecorder
}

// MockProjectArtifactDeleterMockRecorder is the mock recorder for MockProjectArtifactDeleter.
type MockProjectArtifactDeleterMockRecorder struct {
	mock *MockProjectArtifactDeleter
}

// NewMockProjectArtifactDeleter creates a new mock instance.
func NewMockProjectArtifactDeleter(ctrl *gomock.Controller) *MockProjectArtifactDeleter {
	mock := &MockProjectArtifactDeleter{ctrl: ctrl}
	mock.recorder = &MockProjectArtifactDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectArtifactDeleter) EXPECT() *MockProjectArtifactDeleterMockRecorder {
	return m.recorder
}

// DeleteProjectArtifact mocks base method.
func (m *MockProjectArtifactDeleter) DeleteProjectArtifact(arg0 context.Context, arg1 v1alpha1.ProjectArtifactOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectArtifact indicates an expected call of DeleteProjectArtifact.
func (mr *MockProjectArtifactDeleterMockRecorder) DeleteProjectArtifact(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectArtifact", reflect.TypeOf((*MockProjectArtifactDeleter)(nil).DeleteProjectArtifact), arg0, arg1)
}

// Path mocks base method.
func (m *MockProjectArtifactDeleter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectArtifactDeleterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectArtifactDeleter)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectArtifactDeleter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectArtifactDeleterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectArtifactDeleter)(nil).Setup), arg0, arg1)
}

// MockProjectArtifactUploader is a mock of ProjectArtifactUploader interface.
type MockProjectArtifactUploader struct {
	ctrl     *gomock.Controller
	recorder *MockProjectArtifactUploaderMockRecorder
}

// MockProjectArtifactUploaderMockRecorder is the mock recorder for MockProjectArtifactUploader.
type MockProjectArtifactUploaderMockRecorder struct {
	mock *MockProjectArtifactUploader
}

// NewMockProjectArtifactUploader creates a new mock instance.
func NewMockProjectArtifactUploader(ctrl *gomock.Controller) *MockProjectArtifactUploader {
	mock := &MockProjectArtifactUploader{ctrl: ctrl}
	mock.recorder = &MockProjectArtifactUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectArtifactUploader) EXPECT() *MockProjectArtifactUploaderMockRecorder {
	return m.recorder
}

// Path mocks base method.
func (m *MockProjectArtifactUploader) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectArtifactUploaderMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectArtifactUploader)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectArtifactUploader) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectArtifactUploaderMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectArtifactUploader)(nil).Setup), arg0, arg1)
}

// UploadArtifact mocks base method.
func (m *MockProjectArtifactUploader) UploadArtifact(arg0 context.Context, arg1 v1alpha1.ProjectArtifactOptions, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArtifact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadArtifact indicates an expected call of UploadArtifact.
func (mr *MockProjectArtifactUploaderMockRecorder) UploadArtifact(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArtifact", reflect.TypeOf((*MockProjectArtifactUploader)(nil).UploadArtifact), arg0, arg1, arg2)
}

// MockProjectArtifactFileGetter is a mock of ProjectArtifactFileGetter interface.
type MockProjectArtifactFileGetter struct {
	ctrl     *gomock.Controller
	recorder *MockProjectArtifactFileGetterMockRecorder
}

// MockProjectArtifactFileGetterMockRecorder is the mock recorder for MockProjectArtifactFileGetter.
type MockProjectArtifactFileGetterMockRecorder struct {
	mock *MockProjectArtifactFileGetter
}

// NewMockProjectArtifactFileGetter creates a new mock instance.
func NewMockProjectArtifactFileGetter(ctrl *gomock.Controller) *MockProjectArtifactFileGetter {
	mock := &MockProjectArtifactFileGetter{ctrl: ctrl}
	mock.recorder = &MockProjectArtifactFileGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectArtifactFileGetter) EXPECT() *MockProjectArtifactFileGetterMockRecorder {
	return m.recorder
}

// GetProjectArtifactFile mocks base method.
func (m *MockProjectArtifactFileGetter) GetProjectArtifactFile(arg0 context.Context, arg1 v1alpha1.ProjectArtifactOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectArtifactFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectArtifactFile indicates an expected call of GetProjectArtifactFile.
func (mr *MockProjectArtifactFileGetterMockRecorder) GetProjectArtifactFile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectArtifactFile", reflect.TypeOf((*MockProjectArtifactFileGetter)(nil).GetProjectArtifactFile), arg0, arg1)
}

// Path mocks base method.
func (m *MockProjectArtifactFileGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockProjectArtifactFileGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockProjectArtifactFileGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockProjectArtifactFileGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockProjectArtifactFileGetterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockProjectArtifactFileGetter)(nil).Setup), arg0, arg1)
}

// MockArtifactTagDeleter is a mock of ArtifactTagDeleter interface.
type MockArtifactTagDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactTagDeleterMockRecorder
}

// MockArtifactTagDeleterMockRecorder is the mock recorder for MockArtifactTagDeleter.
type MockArtifactTagDeleterMockRecorder struct {
	mock *MockArtifactTagDeleter
}

// NewMockArtifactTagDeleter creates a new mock instance.
func NewMockArtifactTagDeleter(ctrl *gomock.Controller) *MockArtifactTagDeleter {
	mock := &MockArtifactTagDeleter{ctrl: ctrl}
	mock.recorder = &MockArtifactTagDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactTagDeleter) EXPECT() *MockArtifactTagDeleterMockRecorder {
	return m.recorder
}

// DeleteArtifactTag mocks base method.
func (m *MockArtifactTagDeleter) DeleteArtifactTag(arg0 context.Context, arg1 v1alpha1.ArtifactTagOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifactTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifactTag indicates an expected call of DeleteArtifactTag.
func (mr *MockArtifactTagDeleterMockRecorder) DeleteArtifactTag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifactTag", reflect.TypeOf((*MockArtifactTagDeleter)(nil).DeleteArtifactTag), arg0, arg1)
}

// Path mocks base method.
func (m *MockArtifactTagDeleter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockArtifactTagDeleterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockArtifactTagDeleter)(nil).Path))
}

// Setup mocks base method.
func (m *MockArtifactTagDeleter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockArtifactTagDeleterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockArtifactTagDeleter)(nil).Setup), arg0, arg1)
}

// MockArtifactTriggerRegister is a mock of ArtifactTriggerRegister interface.
type MockArtifactTriggerRegister struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactTriggerRegisterMockRecorder
}

// MockArtifactTriggerRegisterMockRecorder is the mock recorder for MockArtifactTriggerRegister.
type MockArtifactTriggerRegisterMockRecorder struct {
	mock *MockArtifactTriggerRegister
}

// NewMockArtifactTriggerRegister creates a new mock instance.
func NewMockArtifactTriggerRegister(ctrl *gomock.Controller) *MockArtifactTriggerRegister {
	mock := &MockArtifactTriggerRegister{ctrl: ctrl}
	mock.recorder = &MockArtifactTriggerRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactTriggerRegister) EXPECT() *MockArtifactTriggerRegisterMockRecorder {
	return m.recorder
}

// GetIntegrationClassName mocks base method.
func (m *MockArtifactTriggerRegister) GetIntegrationClassName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationClassName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIntegrationClassName indicates an expected call of GetIntegrationClassName.
func (mr *MockArtifactTriggerRegisterMockRecorder) GetIntegrationClassName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationClassName", reflect.TypeOf((*MockArtifactTriggerRegister)(nil).GetIntegrationClassName))
}

// PushEventType mocks base method.
func (m *MockArtifactTriggerRegister) PushEventType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushEventType")
	ret0, _ := ret[0].(string)
	return ret0
}

// PushEventType indicates an expected call of PushEventType.
func (mr *MockArtifactTriggerRegisterMockRecorder) PushEventType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushEventType", reflect.TypeOf((*MockArtifactTriggerRegister)(nil).PushEventType))
}
