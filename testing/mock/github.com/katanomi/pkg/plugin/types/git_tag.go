// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: GitRepositoryTagCreator,GitRepositoryTagGetter,GitRepositoryTagLister)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockGitRepositoryTagCreator is a mock of GitRepositoryTagCreator interface.
type MockGitRepositoryTagCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryTagCreatorMockRecorder
}

// MockGitRepositoryTagCreatorMockRecorder is the mock recorder for MockGitRepositoryTagCreator.
type MockGitRepositoryTagCreatorMockRecorder struct {
	mock *MockGitRepositoryTagCreator
}

// NewMockGitRepositoryTagCreator creates a new mock instance.
func NewMockGitRepositoryTagCreator(ctrl *gomock.Controller) *MockGitRepositoryTagCreator {
	mock := &MockGitRepositoryTagCreator{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryTagCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepositoryTagCreator) EXPECT() *MockGitRepositoryTagCreatorMockRecorder {
	return m.recorder
}

// CreateGitRepositoryTag mocks base method.
func (m *MockGitRepositoryTagCreator) CreateGitRepositoryTag(arg0 context.Context, arg1 v1alpha1.CreateGitTagPayload) (v1alpha1.GitRepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepositoryTag", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitRepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepositoryTag indicates an expected call of CreateGitRepositoryTag.
func (mr *MockGitRepositoryTagCreatorMockRecorder) CreateGitRepositoryTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepositoryTag", reflect.TypeOf((*MockGitRepositoryTagCreator)(nil).CreateGitRepositoryTag), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitRepositoryTagCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitRepositoryTagCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitRepositoryTagCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitRepositoryTagCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitRepositoryTagCreatorMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitRepositoryTagCreator)(nil).Setup), arg0, arg1)
}

// MockGitRepositoryTagGetter is a mock of GitRepositoryTagGetter interface.
type MockGitRepositoryTagGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryTagGetterMockRecorder
}

// MockGitRepositoryTagGetterMockRecorder is the mock recorder for MockGitRepositoryTagGetter.
type MockGitRepositoryTagGetterMockRecorder struct {
	mock *MockGitRepositoryTagGetter
}

// NewMockGitRepositoryTagGetter creates a new mock instance.
func NewMockGitRepositoryTagGetter(ctrl *gomock.Controller) *MockGitRepositoryTagGetter {
	mock := &MockGitRepositoryTagGetter{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryTagGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepositoryTagGetter) EXPECT() *MockGitRepositoryTagGetterMockRecorder {
	return m.recorder
}

// GetGitRepositoryTag mocks base method.
func (m *MockGitRepositoryTagGetter) GetGitRepositoryTag(arg0 context.Context, arg1 v1alpha1.GitTag) (v1alpha1.GitRepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoryTag", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitRepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoryTag indicates an expected call of GetGitRepositoryTag.
func (mr *MockGitRepositoryTagGetterMockRecorder) GetGitRepositoryTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoryTag", reflect.TypeOf((*MockGitRepositoryTagGetter)(nil).GetGitRepositoryTag), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitRepositoryTagGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitRepositoryTagGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitRepositoryTagGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitRepositoryTagGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitRepositoryTagGetterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitRepositoryTagGetter)(nil).Setup), arg0, arg1)
}

// MockGitRepositoryTagLister is a mock of GitRepositoryTagLister interface.
type MockGitRepositoryTagLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepositoryTagListerMockRecorder
}

// MockGitRepositoryTagListerMockRecorder is the mock recorder for MockGitRepositoryTagLister.
type MockGitRepositoryTagListerMockRecorder struct {
	mock *MockGitRepositoryTagLister
}

// NewMockGitRepositoryTagLister creates a new mock instance.
func NewMockGitRepositoryTagLister(ctrl *gomock.Controller) *MockGitRepositoryTagLister {
	mock := &MockGitRepositoryTagLister{ctrl: ctrl}
	mock.recorder = &MockGitRepositoryTagListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepositoryTagLister) EXPECT() *MockGitRepositoryTagListerMockRecorder {
	return m.recorder
}

// ListGitRepositoryTag mocks base method.
func (m *MockGitRepositoryTagLister) ListGitRepositoryTag(arg0 context.Context, arg1 v1alpha1.GitRepositoryTagListOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitRepositoryTagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepositoryTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitRepositoryTagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepositoryTag indicates an expected call of ListGitRepositoryTag.
func (mr *MockGitRepositoryTagListerMockRecorder) ListGitRepositoryTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepositoryTag", reflect.TypeOf((*MockGitRepositoryTagLister)(nil).ListGitRepositoryTag), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitRepositoryTagLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitRepositoryTagListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitRepositoryTagLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitRepositoryTagLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitRepositoryTagListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitRepositoryTagLister)(nil).Setup), arg0, arg1)
}
