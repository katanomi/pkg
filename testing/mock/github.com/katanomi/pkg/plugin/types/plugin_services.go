// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: PluginServices)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/coderepository/v1alpha1"
	v1alpha10 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	types "github.com/katanomi/pkg/plugin/types"
	zap "go.uber.org/zap"
)

// MockPluginServices is a mock of PluginServices interface.
type MockPluginServices struct {
	ctrl     *gomock.Controller
	recorder *MockPluginServicesMockRecorder
}

// MockPluginServicesMockRecorder is the mock recorder for MockPluginServices.
type MockPluginServicesMockRecorder struct {
	mock *MockPluginServices
}

// NewMockPluginServices creates a new mock instance.
func NewMockPluginServices(ctrl *gomock.Controller) *MockPluginServices {
	mock := &MockPluginServices{ctrl: ctrl}
	mock.recorder = &MockPluginServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginServices) EXPECT() *MockPluginServicesMockRecorder {
	return m.recorder
}

// AuthCheck mocks base method.
func (m *MockPluginServices) AuthCheck(arg0 context.Context, arg1 v1alpha10.AuthCheckOptions) (*v1alpha10.AuthCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthCheck", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.AuthCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthCheck indicates an expected call of AuthCheck.
func (mr *MockPluginServicesMockRecorder) AuthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthCheck", reflect.TypeOf((*MockPluginServices)(nil).AuthCheck), arg0, arg1)
}

// AuthToken mocks base method.
func (m *MockPluginServices) AuthToken(arg0 context.Context) (*v1alpha10.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthToken", arg0)
	ret0, _ := ret[0].(*v1alpha10.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthToken indicates an expected call of AuthToken.
func (mr *MockPluginServicesMockRecorder) AuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthToken", reflect.TypeOf((*MockPluginServices)(nil).AuthToken), arg0)
}

// CheckAlive mocks base method.
func (m *MockPluginServices) CheckAlive(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAlive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAlive indicates an expected call of CheckAlive.
func (mr *MockPluginServicesMockRecorder) CheckAlive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAlive", reflect.TypeOf((*MockPluginServices)(nil).CheckAlive), arg0)
}

// CreateGitBranch mocks base method.
func (m *MockPluginServices) CreateGitBranch(arg0 context.Context, arg1 v1alpha10.CreateBranchPayload) (v1alpha10.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitBranch", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitBranch indicates an expected call of CreateGitBranch.
func (mr *MockPluginServicesMockRecorder) CreateGitBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitBranch", reflect.TypeOf((*MockPluginServices)(nil).CreateGitBranch), arg0, arg1)
}

// CreateGitCommit mocks base method.
func (m *MockPluginServices) CreateGitCommit(arg0 context.Context, arg1 v1alpha1.CreateGitCommitOption) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommit", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommit indicates an expected call of CreateGitCommit.
func (mr *MockPluginServicesMockRecorder) CreateGitCommit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommit", reflect.TypeOf((*MockPluginServices)(nil).CreateGitCommit), arg0, arg1)
}

// CreateGitCommitComment mocks base method.
func (m *MockPluginServices) CreateGitCommitComment(arg0 context.Context, arg1 v1alpha10.CreateCommitCommentPayload) (v1alpha10.GitCommitComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommitComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitComment indicates an expected call of CreateGitCommitComment.
func (mr *MockPluginServicesMockRecorder) CreateGitCommitComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitComment", reflect.TypeOf((*MockPluginServices)(nil).CreateGitCommitComment), arg0, arg1)
}

// CreateGitCommitStatus mocks base method.
func (m *MockPluginServices) CreateGitCommitStatus(arg0 context.Context, arg1 v1alpha10.CreateCommitStatusPayload) (v1alpha10.GitCommitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitCommitStatus", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitCommitStatus indicates an expected call of CreateGitCommitStatus.
func (mr *MockPluginServicesMockRecorder) CreateGitCommitStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitCommitStatus", reflect.TypeOf((*MockPluginServices)(nil).CreateGitCommitStatus), arg0, arg1)
}

// CreateGitRepoFile mocks base method.
func (m *MockPluginServices) CreateGitRepoFile(arg0 context.Context, arg1 v1alpha10.CreateRepoFilePayload) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitRepoFile", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitRepoFile indicates an expected call of CreateGitRepoFile.
func (mr *MockPluginServicesMockRecorder) CreateGitRepoFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitRepoFile", reflect.TypeOf((*MockPluginServices)(nil).CreateGitRepoFile), arg0, arg1)
}

// CreateProject mocks base method.
func (m *MockPluginServices) CreateProject(arg0 context.Context, arg1 *v1alpha10.Project) (*v1alpha10.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockPluginServicesMockRecorder) CreateProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockPluginServices)(nil).CreateProject), arg0, arg1)
}

// CreatePullRequest mocks base method.
func (m *MockPluginServices) CreatePullRequest(arg0 context.Context, arg1 v1alpha10.CreatePullRequestPayload) (v1alpha10.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockPluginServicesMockRecorder) CreatePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockPluginServices)(nil).CreatePullRequest), arg0, arg1)
}

// CreatePullRequestComment mocks base method.
func (m *MockPluginServices) CreatePullRequestComment(arg0 context.Context, arg1 v1alpha10.CreatePullRequestCommentPayload) (v1alpha10.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestComment indicates an expected call of CreatePullRequestComment.
func (mr *MockPluginServicesMockRecorder) CreatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestComment", reflect.TypeOf((*MockPluginServices)(nil).CreatePullRequestComment), arg0, arg1)
}

// CreateTestCaseExecution mocks base method.
func (m *MockPluginServices) CreateTestCaseExecution(arg0 context.Context, arg1 v1alpha10.TestProjectOptions, arg2 v1alpha10.TestCaseExecution) (*v1alpha10.TestCaseExecution, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTestCaseExecution", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.TestCaseExecution)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestCaseExecution indicates an expected call of CreateTestCaseExecution.
func (mr *MockPluginServicesMockRecorder) CreateTestCaseExecution(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestCaseExecution", reflect.TypeOf((*MockPluginServices)(nil).CreateTestCaseExecution), arg0, arg1, arg2)
}

// DeleteArtifact mocks base method.
func (m *MockPluginServices) DeleteArtifact(arg0 context.Context, arg1 v1alpha10.ArtifactOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockPluginServicesMockRecorder) DeleteArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockPluginServices)(nil).DeleteArtifact), arg0, arg1)
}

// DeleteArtifactTag mocks base method.
func (m *MockPluginServices) DeleteArtifactTag(arg0 context.Context, arg1 v1alpha10.ArtifactTagOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArtifactTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArtifactTag indicates an expected call of DeleteArtifactTag.
func (mr *MockPluginServicesMockRecorder) DeleteArtifactTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifactTag", reflect.TypeOf((*MockPluginServices)(nil).DeleteArtifactTag), arg0, arg1)
}

// DeleteProjectArtifact mocks base method.
func (m *MockPluginServices) DeleteProjectArtifact(arg0 context.Context, arg1 v1alpha10.ProjectArtifactOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProjectArtifact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProjectArtifact indicates an expected call of DeleteProjectArtifact.
func (mr *MockPluginServicesMockRecorder) DeleteProjectArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectArtifact", reflect.TypeOf((*MockPluginServices)(nil).DeleteProjectArtifact), arg0, arg1)
}

// GetArtifact mocks base method.
func (m *MockPluginServices) GetArtifact(arg0 context.Context, arg1 v1alpha10.ArtifactOptions) (*v1alpha10.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockPluginServicesMockRecorder) GetArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockPluginServices)(nil).GetArtifact), arg0, arg1)
}

// GetCodeQuality mocks base method.
func (m *MockPluginServices) GetCodeQuality(arg0 context.Context, arg1 string) (*v1alpha10.CodeQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQuality", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.CodeQuality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQuality indicates an expected call of GetCodeQuality.
func (mr *MockPluginServicesMockRecorder) GetCodeQuality(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQuality", reflect.TypeOf((*MockPluginServices)(nil).GetCodeQuality), arg0, arg1)
}

// GetCodeQualityLineCharts mocks base method.
func (m *MockPluginServices) GetCodeQualityLineCharts(arg0 context.Context, arg1 v1alpha10.CodeQualityLineChartOption) (*v1alpha10.CodeQualityLineChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQualityLineCharts", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.CodeQualityLineChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQualityLineCharts indicates an expected call of GetCodeQualityLineCharts.
func (mr *MockPluginServicesMockRecorder) GetCodeQualityLineCharts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQualityLineCharts", reflect.TypeOf((*MockPluginServices)(nil).GetCodeQualityLineCharts), arg0, arg1)
}

// GetCodeQualityOverviewByBranch mocks base method.
func (m *MockPluginServices) GetCodeQualityOverviewByBranch(arg0 context.Context, arg1 v1alpha10.CodeQualityBaseOption) (*v1alpha10.CodeQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQualityOverviewByBranch", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.CodeQuality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQualityOverviewByBranch indicates an expected call of GetCodeQualityOverviewByBranch.
func (mr *MockPluginServicesMockRecorder) GetCodeQualityOverviewByBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQualityOverviewByBranch", reflect.TypeOf((*MockPluginServices)(nil).GetCodeQualityOverviewByBranch), arg0, arg1)
}

// GetGitBranch mocks base method.
func (m *MockPluginServices) GetGitBranch(arg0 context.Context, arg1 v1alpha10.GitRepo, arg2 string) (v1alpha10.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitBranch indicates an expected call of GetGitBranch.
func (mr *MockPluginServicesMockRecorder) GetGitBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitBranch", reflect.TypeOf((*MockPluginServices)(nil).GetGitBranch), arg0, arg1, arg2)
}

// GetGitCommit mocks base method.
func (m *MockPluginServices) GetGitCommit(arg0 context.Context, arg1 v1alpha10.GitCommitOption) (v1alpha10.GitCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitCommit", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitCommit indicates an expected call of GetGitCommit.
func (mr *MockPluginServicesMockRecorder) GetGitCommit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitCommit", reflect.TypeOf((*MockPluginServices)(nil).GetGitCommit), arg0, arg1)
}

// GetGitPullRequest mocks base method.
func (m *MockPluginServices) GetGitPullRequest(arg0 context.Context, arg1 v1alpha10.GitPullRequestOption) (v1alpha10.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitPullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitPullRequest indicates an expected call of GetGitPullRequest.
func (mr *MockPluginServicesMockRecorder) GetGitPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitPullRequest", reflect.TypeOf((*MockPluginServices)(nil).GetGitPullRequest), arg0, arg1)
}

// GetGitRepoFile mocks base method.
func (m *MockPluginServices) GetGitRepoFile(arg0 context.Context, arg1 v1alpha10.GitRepoFileOption) (v1alpha10.GitRepoFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepoFile", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepoFile indicates an expected call of GetGitRepoFile.
func (mr *MockPluginServicesMockRecorder) GetGitRepoFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepoFile", reflect.TypeOf((*MockPluginServices)(nil).GetGitRepoFile), arg0, arg1)
}

// GetGitRepository mocks base method.
func (m *MockPluginServices) GetGitRepository(arg0 context.Context, arg1 v1alpha10.GitRepo) (v1alpha10.GitRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepository", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepository indicates an expected call of GetGitRepository.
func (mr *MockPluginServicesMockRecorder) GetGitRepository(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepository", reflect.TypeOf((*MockPluginServices)(nil).GetGitRepository), arg0, arg1)
}

// GetGitRepositoryFileTree mocks base method.
func (m *MockPluginServices) GetGitRepositoryFileTree(arg0 context.Context, arg1 v1alpha10.GitRepoFileTreeOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitRepositoryFileTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoryFileTree", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryFileTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoryFileTree indicates an expected call of GetGitRepositoryFileTree.
func (mr *MockPluginServicesMockRecorder) GetGitRepositoryFileTree(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoryFileTree", reflect.TypeOf((*MockPluginServices)(nil).GetGitRepositoryFileTree), arg0, arg1, arg2)
}

// GetGitRepositoryTag mocks base method.
func (m *MockPluginServices) GetGitRepositoryTag(arg0 context.Context, arg1 v1alpha10.GitTag) (v1alpha10.GitRepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitRepositoryTag", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitRepositoryTag indicates an expected call of GetGitRepositoryTag.
func (mr *MockPluginServicesMockRecorder) GetGitRepositoryTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitRepositoryTag", reflect.TypeOf((*MockPluginServices)(nil).GetGitRepositoryTag), arg0, arg1)
}

// GetOverview mocks base method.
func (m *MockPluginServices) GetOverview(arg0 context.Context) (*v1alpha10.CodeQualityProjectOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverview", arg0)
	ret0, _ := ret[0].(*v1alpha10.CodeQualityProjectOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverview indicates an expected call of GetOverview.
func (mr *MockPluginServicesMockRecorder) GetOverview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverview", reflect.TypeOf((*MockPluginServices)(nil).GetOverview), arg0)
}

// GetProject mocks base method.
func (m *MockPluginServices) GetProject(arg0 context.Context, arg1 string) (*v1alpha10.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockPluginServicesMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockPluginServices)(nil).GetProject), arg0, arg1)
}

// GetProjectArtifact mocks base method.
func (m *MockPluginServices) GetProjectArtifact(arg0 context.Context, arg1 v1alpha10.ProjectArtifactOptions) (*v1alpha10.Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectArtifact", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectArtifact indicates an expected call of GetProjectArtifact.
func (mr *MockPluginServicesMockRecorder) GetProjectArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectArtifact", reflect.TypeOf((*MockPluginServices)(nil).GetProjectArtifact), arg0, arg1)
}

// GetProjectArtifactFile mocks base method.
func (m *MockPluginServices) GetProjectArtifactFile(arg0 context.Context, arg1 v1alpha10.ProjectArtifactOptions) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectArtifactFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectArtifactFile indicates an expected call of GetProjectArtifactFile.
func (mr *MockPluginServicesMockRecorder) GetProjectArtifactFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectArtifactFile", reflect.TypeOf((*MockPluginServices)(nil).GetProjectArtifactFile), arg0, arg1)
}

// GetSubTypeProject mocks base method.
func (m *MockPluginServices) GetSubTypeProject(arg0 context.Context, arg1 types.GetProjectOption) (*v1alpha10.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubTypeProject", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubTypeProject indicates an expected call of GetSubTypeProject.
func (mr *MockPluginServicesMockRecorder) GetSubTypeProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubTypeProject", reflect.TypeOf((*MockPluginServices)(nil).GetSubTypeProject), arg0, arg1)
}

// GetSummaryByTaskID mocks base method.
func (m *MockPluginServices) GetSummaryByTaskID(arg0 context.Context, arg1 v1alpha10.CodeQualityTaskOption) (*v1alpha10.CodeQualityTaskMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryByTaskID", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.CodeQualityTaskMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryByTaskID indicates an expected call of GetSummaryByTaskID.
func (mr *MockPluginServicesMockRecorder) GetSummaryByTaskID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryByTaskID", reflect.TypeOf((*MockPluginServices)(nil).GetSummaryByTaskID), arg0, arg1)
}

// GetTestCase mocks base method.
func (m *MockPluginServices) GetTestCase(arg0 context.Context, arg1 v1alpha10.TestProjectOptions) (*v1alpha10.TestCase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestCase", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.TestCase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestCase indicates an expected call of GetTestCase.
func (mr *MockPluginServicesMockRecorder) GetTestCase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestCase", reflect.TypeOf((*MockPluginServices)(nil).GetTestCase), arg0, arg1)
}

// GetTestPlan mocks base method.
func (m *MockPluginServices) GetTestPlan(arg0 context.Context, arg1 v1alpha10.TestProjectOptions) (*v1alpha10.TestPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestPlan", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.TestPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestPlan indicates an expected call of GetTestPlan.
func (mr *MockPluginServicesMockRecorder) GetTestPlan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestPlan", reflect.TypeOf((*MockPluginServices)(nil).GetTestPlan), arg0, arg1)
}

// GetToolMetadata mocks base method.
func (m *MockPluginServices) GetToolMetadata(arg0 context.Context) (*v1alpha10.ToolMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToolMetadata", arg0)
	ret0, _ := ret[0].(*v1alpha10.ToolMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToolMetadata indicates an expected call of GetToolMetadata.
func (mr *MockPluginServicesMockRecorder) GetToolMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToolMetadata", reflect.TypeOf((*MockPluginServices)(nil).GetToolMetadata), arg0)
}

// Initialize mocks base method.
func (m *MockPluginServices) Initialize(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPluginServicesMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPluginServices)(nil).Initialize), arg0)
}

// ListArtifacts mocks base method.
func (m *MockPluginServices) ListArtifacts(arg0 context.Context, arg1 v1alpha10.ArtifactOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.ArtifactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.ArtifactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockPluginServicesMockRecorder) ListArtifacts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockPluginServices)(nil).ListArtifacts), arg0, arg1, arg2)
}

// ListBlobStores mocks base method.
func (m *MockPluginServices) ListBlobStores(arg0 context.Context, arg1 v1alpha10.ListOptions) (*v1alpha10.BlobStoreList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlobStores", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.BlobStoreList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlobStores indicates an expected call of ListBlobStores.
func (mr *MockPluginServicesMockRecorder) ListBlobStores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlobStores", reflect.TypeOf((*MockPluginServices)(nil).ListBlobStores), arg0, arg1)
}

// ListGitBranch mocks base method.
func (m *MockPluginServices) ListGitBranch(arg0 context.Context, arg1 v1alpha10.GitBranchOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitBranchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitBranchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitBranch indicates an expected call of ListGitBranch.
func (mr *MockPluginServicesMockRecorder) ListGitBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitBranch", reflect.TypeOf((*MockPluginServices)(nil).ListGitBranch), arg0, arg1, arg2)
}

// ListGitCommit mocks base method.
func (m *MockPluginServices) ListGitCommit(arg0 context.Context, arg1 v1alpha10.GitCommitListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommit indicates an expected call of ListGitCommit.
func (mr *MockPluginServicesMockRecorder) ListGitCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommit", reflect.TypeOf((*MockPluginServices)(nil).ListGitCommit), arg0, arg1, arg2)
}

// ListGitCommitComment mocks base method.
func (m *MockPluginServices) ListGitCommitComment(arg0 context.Context, arg1 v1alpha10.GitCommitOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitCommentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitCommentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitComment indicates an expected call of ListGitCommitComment.
func (mr *MockPluginServicesMockRecorder) ListGitCommitComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitComment", reflect.TypeOf((*MockPluginServices)(nil).ListGitCommitComment), arg0, arg1, arg2)
}

// ListGitCommitStatus mocks base method.
func (m *MockPluginServices) ListGitCommitStatus(arg0 context.Context, arg1 v1alpha10.GitCommitOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitCommitStatusList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitCommitStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitCommitStatusList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitCommitStatus indicates an expected call of ListGitCommitStatus.
func (mr *MockPluginServicesMockRecorder) ListGitCommitStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitCommitStatus", reflect.TypeOf((*MockPluginServices)(nil).ListGitCommitStatus), arg0, arg1, arg2)
}

// ListGitPullRequest mocks base method.
func (m *MockPluginServices) ListGitPullRequest(arg0 context.Context, arg1 v1alpha10.GitPullRequestListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitPullRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitPullRequest indicates an expected call of ListGitPullRequest.
func (mr *MockPluginServicesMockRecorder) ListGitPullRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitPullRequest", reflect.TypeOf((*MockPluginServices)(nil).ListGitPullRequest), arg0, arg1, arg2)
}

// ListGitRepository mocks base method.
func (m *MockPluginServices) ListGitRepository(arg0 context.Context, arg1, arg2 string, arg3 v1alpha10.ProjectSubType, arg4 v1alpha10.ListOptions) (v1alpha10.GitRepositoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepository", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepository indicates an expected call of ListGitRepository.
func (mr *MockPluginServicesMockRecorder) ListGitRepository(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepository", reflect.TypeOf((*MockPluginServices)(nil).ListGitRepository), arg0, arg1, arg2, arg3, arg4)
}

// ListGitRepositoryTag mocks base method.
func (m *MockPluginServices) ListGitRepositoryTag(arg0 context.Context, arg1 v1alpha10.GitRepositoryTagListOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitRepositoryTagList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitRepositoryTag", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitRepositoryTagList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitRepositoryTag indicates an expected call of ListGitRepositoryTag.
func (mr *MockPluginServicesMockRecorder) ListGitRepositoryTag(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitRepositoryTag", reflect.TypeOf((*MockPluginServices)(nil).ListGitRepositoryTag), arg0, arg1, arg2)
}

// ListProjectArtifacts mocks base method.
func (m *MockPluginServices) ListProjectArtifacts(arg0 context.Context, arg1 v1alpha10.ArtifactOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.ArtifactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectArtifacts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.ArtifactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectArtifacts indicates an expected call of ListProjectArtifacts.
func (mr *MockPluginServicesMockRecorder) ListProjectArtifacts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectArtifacts", reflect.TypeOf((*MockPluginServices)(nil).ListProjectArtifacts), arg0, arg1, arg2)
}

// ListProjects mocks base method.
func (m *MockPluginServices) ListProjects(arg0 context.Context, arg1 v1alpha10.ListOptions) (*v1alpha10.ProjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha10.ProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockPluginServicesMockRecorder) ListProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockPluginServices)(nil).ListProjects), arg0, arg1)
}

// ListPullRequestComment mocks base method.
func (m *MockPluginServices) ListPullRequestComment(arg0 context.Context, arg1 v1alpha10.GitPullRequestOption, arg2 v1alpha10.ListOptions) (v1alpha10.GitPullRequestNoteList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComment indicates an expected call of ListPullRequestComment.
func (mr *MockPluginServicesMockRecorder) ListPullRequestComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComment", reflect.TypeOf((*MockPluginServices)(nil).ListPullRequestComment), arg0, arg1, arg2)
}

// ListRepositories mocks base method.
func (m *MockPluginServices) ListRepositories(arg0 context.Context, arg1 v1alpha10.RepositoryOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.RepositoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.RepositoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockPluginServicesMockRecorder) ListRepositories(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockPluginServices)(nil).ListRepositories), arg0, arg1, arg2)
}

// ListTestCaseExecutions mocks base method.
func (m *MockPluginServices) ListTestCaseExecutions(arg0 context.Context, arg1 v1alpha10.TestProjectOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.TestCaseExecutionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCaseExecutions", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.TestCaseExecutionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCaseExecutions indicates an expected call of ListTestCaseExecutions.
func (mr *MockPluginServicesMockRecorder) ListTestCaseExecutions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCaseExecutions", reflect.TypeOf((*MockPluginServices)(nil).ListTestCaseExecutions), arg0, arg1, arg2)
}

// ListTestCases mocks base method.
func (m *MockPluginServices) ListTestCases(arg0 context.Context, arg1 v1alpha10.TestProjectOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.TestCaseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestCases", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.TestCaseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestCases indicates an expected call of ListTestCases.
func (mr *MockPluginServicesMockRecorder) ListTestCases(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestCases", reflect.TypeOf((*MockPluginServices)(nil).ListTestCases), arg0, arg1, arg2)
}

// ListTestModules mocks base method.
func (m *MockPluginServices) ListTestModules(arg0 context.Context, arg1 v1alpha10.TestProjectOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.TestModuleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestModules", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.TestModuleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestModules indicates an expected call of ListTestModules.
func (mr *MockPluginServicesMockRecorder) ListTestModules(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestModules", reflect.TypeOf((*MockPluginServices)(nil).ListTestModules), arg0, arg1, arg2)
}

// ListTestPlans mocks base method.
func (m *MockPluginServices) ListTestPlans(arg0 context.Context, arg1 v1alpha10.TestProjectOptions, arg2 v1alpha10.ListOptions) (*v1alpha10.TestPlanList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestPlans", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1alpha10.TestPlanList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestPlans indicates an expected call of ListTestPlans.
func (mr *MockPluginServicesMockRecorder) ListTestPlans(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestPlans", reflect.TypeOf((*MockPluginServices)(nil).ListTestPlans), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockPluginServices) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockPluginServicesMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockPluginServices)(nil).Path))
}

// Setup mocks base method.
func (m *MockPluginServices) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockPluginServicesMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockPluginServices)(nil).Setup), arg0, arg1)
}

// UpdatePullRequestComment mocks base method.
func (m *MockPluginServices) UpdatePullRequestComment(arg0 context.Context, arg1 v1alpha10.UpdatePullRequestCommentPayload) (v1alpha10.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha10.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestComment indicates an expected call of UpdatePullRequestComment.
func (mr *MockPluginServicesMockRecorder) UpdatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestComment", reflect.TypeOf((*MockPluginServices)(nil).UpdatePullRequestComment), arg0, arg1)
}

// UploadArtifact mocks base method.
func (m *MockPluginServices) UploadArtifact(arg0 context.Context, arg1 v1alpha10.ProjectArtifactOptions, arg2 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadArtifact", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadArtifact indicates an expected call of UploadArtifact.
func (mr *MockPluginServicesMockRecorder) UploadArtifact(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadArtifact", reflect.TypeOf((*MockPluginServices)(nil).UploadArtifact), arg0, arg1, arg2)
}
