// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: GitPullRequestCommentCreator,GitPullRequestCommentUpdater,GitPullRequestCommentLister,GitPullRequestHandler,GitPullRequestLister,GitPullRequestGetter,GitPullRequestCreator)

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	zap "go.uber.org/zap"
)

// MockGitPullRequestCommentCreator is a mock of GitPullRequestCommentCreator interface.
type MockGitPullRequestCommentCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestCommentCreatorMockRecorder
}

// MockGitPullRequestCommentCreatorMockRecorder is the mock recorder for MockGitPullRequestCommentCreator.
type MockGitPullRequestCommentCreatorMockRecorder struct {
	mock *MockGitPullRequestCommentCreator
}

// NewMockGitPullRequestCommentCreator creates a new mock instance.
func NewMockGitPullRequestCommentCreator(ctrl *gomock.Controller) *MockGitPullRequestCommentCreator {
	mock := &MockGitPullRequestCommentCreator{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestCommentCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestCommentCreator) EXPECT() *MockGitPullRequestCommentCreatorMockRecorder {
	return m.recorder
}

// CreatePullRequestComment mocks base method.
func (m *MockGitPullRequestCommentCreator) CreatePullRequestComment(arg0 context.Context, arg1 v1alpha1.CreatePullRequestCommentPayload) (v1alpha1.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequestComment indicates an expected call of CreatePullRequestComment.
func (mr *MockGitPullRequestCommentCreatorMockRecorder) CreatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequestComment", reflect.TypeOf((*MockGitPullRequestCommentCreator)(nil).CreatePullRequestComment), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitPullRequestCommentCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestCommentCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestCommentCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestCommentCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestCommentCreatorMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestCommentCreator)(nil).Setup), arg0, arg1)
}

// MockGitPullRequestCommentUpdater is a mock of GitPullRequestCommentUpdater interface.
type MockGitPullRequestCommentUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestCommentUpdaterMockRecorder
}

// MockGitPullRequestCommentUpdaterMockRecorder is the mock recorder for MockGitPullRequestCommentUpdater.
type MockGitPullRequestCommentUpdaterMockRecorder struct {
	mock *MockGitPullRequestCommentUpdater
}

// NewMockGitPullRequestCommentUpdater creates a new mock instance.
func NewMockGitPullRequestCommentUpdater(ctrl *gomock.Controller) *MockGitPullRequestCommentUpdater {
	mock := &MockGitPullRequestCommentUpdater{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestCommentUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestCommentUpdater) EXPECT() *MockGitPullRequestCommentUpdaterMockRecorder {
	return m.recorder
}

// Path mocks base method.
func (m *MockGitPullRequestCommentUpdater) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestCommentUpdaterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestCommentUpdater)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestCommentUpdater) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestCommentUpdaterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestCommentUpdater)(nil).Setup), arg0, arg1)
}

// UpdatePullRequestComment mocks base method.
func (m *MockGitPullRequestCommentUpdater) UpdatePullRequestComment(arg0 context.Context, arg1 v1alpha1.UpdatePullRequestCommentPayload) (v1alpha1.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullRequestComment", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullRequestComment indicates an expected call of UpdatePullRequestComment.
func (mr *MockGitPullRequestCommentUpdaterMockRecorder) UpdatePullRequestComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullRequestComment", reflect.TypeOf((*MockGitPullRequestCommentUpdater)(nil).UpdatePullRequestComment), arg0, arg1)
}

// MockGitPullRequestCommentLister is a mock of GitPullRequestCommentLister interface.
type MockGitPullRequestCommentLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestCommentListerMockRecorder
}

// MockGitPullRequestCommentListerMockRecorder is the mock recorder for MockGitPullRequestCommentLister.
type MockGitPullRequestCommentListerMockRecorder struct {
	mock *MockGitPullRequestCommentLister
}

// NewMockGitPullRequestCommentLister creates a new mock instance.
func NewMockGitPullRequestCommentLister(ctrl *gomock.Controller) *MockGitPullRequestCommentLister {
	mock := &MockGitPullRequestCommentLister{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestCommentListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestCommentLister) EXPECT() *MockGitPullRequestCommentListerMockRecorder {
	return m.recorder
}

// ListPullRequestComment mocks base method.
func (m *MockGitPullRequestCommentLister) ListPullRequestComment(arg0 context.Context, arg1 v1alpha1.GitPullRequestOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitPullRequestNoteList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPullRequestComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitPullRequestNoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPullRequestComment indicates an expected call of ListPullRequestComment.
func (mr *MockGitPullRequestCommentListerMockRecorder) ListPullRequestComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPullRequestComment", reflect.TypeOf((*MockGitPullRequestCommentLister)(nil).ListPullRequestComment), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitPullRequestCommentLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestCommentListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestCommentLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestCommentLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestCommentListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestCommentLister)(nil).Setup), arg0, arg1)
}

// MockGitPullRequestHandler is a mock of GitPullRequestHandler interface.
type MockGitPullRequestHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestHandlerMockRecorder
}

// MockGitPullRequestHandlerMockRecorder is the mock recorder for MockGitPullRequestHandler.
type MockGitPullRequestHandlerMockRecorder struct {
	mock *MockGitPullRequestHandler
}

// NewMockGitPullRequestHandler creates a new mock instance.
func NewMockGitPullRequestHandler(ctrl *gomock.Controller) *MockGitPullRequestHandler {
	mock := &MockGitPullRequestHandler{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestHandler) EXPECT() *MockGitPullRequestHandlerMockRecorder {
	return m.recorder
}

// CreatePullRequest mocks base method.
func (m *MockGitPullRequestHandler) CreatePullRequest(arg0 context.Context, arg1 v1alpha1.CreatePullRequestPayload) (v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGitPullRequestHandlerMockRecorder) CreatePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitPullRequestHandler)(nil).CreatePullRequest), arg0, arg1)
}

// GetGitPullRequest mocks base method.
func (m *MockGitPullRequestHandler) GetGitPullRequest(arg0 context.Context, arg1 v1alpha1.GitPullRequestOption) (v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitPullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitPullRequest indicates an expected call of GetGitPullRequest.
func (mr *MockGitPullRequestHandlerMockRecorder) GetGitPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitPullRequest", reflect.TypeOf((*MockGitPullRequestHandler)(nil).GetGitPullRequest), arg0, arg1)
}

// ListGitPullRequest mocks base method.
func (m *MockGitPullRequestHandler) ListGitPullRequest(arg0 context.Context, arg1 v1alpha1.GitPullRequestListOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitPullRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitPullRequest indicates an expected call of ListGitPullRequest.
func (mr *MockGitPullRequestHandlerMockRecorder) ListGitPullRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitPullRequest", reflect.TypeOf((*MockGitPullRequestHandler)(nil).ListGitPullRequest), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitPullRequestHandler) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestHandlerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestHandler)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestHandler) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestHandlerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestHandler)(nil).Setup), arg0, arg1)
}

// MockGitPullRequestLister is a mock of GitPullRequestLister interface.
type MockGitPullRequestLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestListerMockRecorder
}

// MockGitPullRequestListerMockRecorder is the mock recorder for MockGitPullRequestLister.
type MockGitPullRequestListerMockRecorder struct {
	mock *MockGitPullRequestLister
}

// NewMockGitPullRequestLister creates a new mock instance.
func NewMockGitPullRequestLister(ctrl *gomock.Controller) *MockGitPullRequestLister {
	mock := &MockGitPullRequestLister{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestLister) EXPECT() *MockGitPullRequestListerMockRecorder {
	return m.recorder
}

// ListGitPullRequest mocks base method.
func (m *MockGitPullRequestLister) ListGitPullRequest(arg0 context.Context, arg1 v1alpha1.GitPullRequestListOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitPullRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitPullRequest indicates an expected call of ListGitPullRequest.
func (mr *MockGitPullRequestListerMockRecorder) ListGitPullRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitPullRequest", reflect.TypeOf((*MockGitPullRequestLister)(nil).ListGitPullRequest), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitPullRequestLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestListerMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestLister)(nil).Setup), arg0, arg1)
}

// MockGitPullRequestGetter is a mock of GitPullRequestGetter interface.
type MockGitPullRequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestGetterMockRecorder
}

// MockGitPullRequestGetterMockRecorder is the mock recorder for MockGitPullRequestGetter.
type MockGitPullRequestGetterMockRecorder struct {
	mock *MockGitPullRequestGetter
}

// NewMockGitPullRequestGetter creates a new mock instance.
func NewMockGitPullRequestGetter(ctrl *gomock.Controller) *MockGitPullRequestGetter {
	mock := &MockGitPullRequestGetter{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestGetter) EXPECT() *MockGitPullRequestGetterMockRecorder {
	return m.recorder
}

// GetGitPullRequest mocks base method.
func (m *MockGitPullRequestGetter) GetGitPullRequest(arg0 context.Context, arg1 v1alpha1.GitPullRequestOption) (v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitPullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitPullRequest indicates an expected call of GetGitPullRequest.
func (mr *MockGitPullRequestGetterMockRecorder) GetGitPullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitPullRequest", reflect.TypeOf((*MockGitPullRequestGetter)(nil).GetGitPullRequest), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitPullRequestGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestGetterMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestGetter)(nil).Setup), arg0, arg1)
}

// MockGitPullRequestCreator is a mock of GitPullRequestCreator interface.
type MockGitPullRequestCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestCreatorMockRecorder
}

// MockGitPullRequestCreatorMockRecorder is the mock recorder for MockGitPullRequestCreator.
type MockGitPullRequestCreatorMockRecorder struct {
	mock *MockGitPullRequestCreator
}

// NewMockGitPullRequestCreator creates a new mock instance.
func NewMockGitPullRequestCreator(ctrl *gomock.Controller) *MockGitPullRequestCreator {
	mock := &MockGitPullRequestCreator{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestCreator) EXPECT() *MockGitPullRequestCreatorMockRecorder {
	return m.recorder
}

// CreatePullRequest mocks base method.
func (m *MockGitPullRequestCreator) CreatePullRequest(arg0 context.Context, arg1 v1alpha1.CreatePullRequestPayload) (v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGitPullRequestCreatorMockRecorder) CreatePullRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGitPullRequestCreator)(nil).CreatePullRequest), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitPullRequestCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitPullRequestCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitPullRequestCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitPullRequestCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitPullRequestCreatorMockRecorder) Setup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitPullRequestCreator)(nil).Setup), arg0, arg1)
}
