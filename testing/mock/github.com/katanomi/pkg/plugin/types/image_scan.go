// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: ScanImage)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/image_scan.go github.com/katanomi/pkg/plugin/types ScanImage
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockScanImage is a mock of ScanImage interface.
type MockScanImage struct {
	ctrl     *gomock.Controller
	recorder *MockScanImageMockRecorder
}

// MockScanImageMockRecorder is the mock recorder for MockScanImage.
type MockScanImageMockRecorder struct {
	mock *MockScanImage
}

// NewMockScanImage creates a new mock instance.
func NewMockScanImage(ctrl *gomock.Controller) *MockScanImage {
	mock := &MockScanImage{ctrl: ctrl}
	mock.recorder = &MockScanImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanImage) EXPECT() *MockScanImageMockRecorder {
	return m.recorder
}

// Path mocks base method.
func (m *MockScanImage) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockScanImageMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockScanImage)(nil).Path))
}

// ScanImage mocks base method.
func (m *MockScanImage) ScanImage(arg0 context.Context, arg1 v1alpha1.ArtifactOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanImage indicates an expected call of ScanImage.
func (mr *MockScanImageMockRecorder) ScanImage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanImage", reflect.TypeOf((*MockScanImage)(nil).ScanImage), arg0, arg1)
}

// Setup mocks base method.
func (m *MockScanImage) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockScanImageMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockScanImage)(nil).Setup), arg0, arg1)
}
