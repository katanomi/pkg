// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: GitBranchLister,GitBranchGetter,GitBranchCreator)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/git_branch.go github.com/katanomi/pkg/plugin/types GitBranchLister,GitBranchGetter,GitBranchCreator
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockGitBranchLister is a mock of GitBranchLister interface.
type MockGitBranchLister struct {
	ctrl     *gomock.Controller
	recorder *MockGitBranchListerMockRecorder
}

// MockGitBranchListerMockRecorder is the mock recorder for MockGitBranchLister.
type MockGitBranchListerMockRecorder struct {
	mock *MockGitBranchLister
}

// NewMockGitBranchLister creates a new mock instance.
func NewMockGitBranchLister(ctrl *gomock.Controller) *MockGitBranchLister {
	mock := &MockGitBranchLister{ctrl: ctrl}
	mock.recorder = &MockGitBranchListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBranchLister) EXPECT() *MockGitBranchListerMockRecorder {
	return m.recorder
}

// ListGitBranch mocks base method.
func (m *MockGitBranchLister) ListGitBranch(arg0 context.Context, arg1 v1alpha1.GitBranchOption, arg2 v1alpha1.ListOptions) (v1alpha1.GitBranchList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitBranchList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGitBranch indicates an expected call of ListGitBranch.
func (mr *MockGitBranchListerMockRecorder) ListGitBranch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGitBranch", reflect.TypeOf((*MockGitBranchLister)(nil).ListGitBranch), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitBranchLister) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitBranchListerMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitBranchLister)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitBranchLister) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitBranchListerMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitBranchLister)(nil).Setup), arg0, arg1)
}

// MockGitBranchGetter is a mock of GitBranchGetter interface.
type MockGitBranchGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGitBranchGetterMockRecorder
}

// MockGitBranchGetterMockRecorder is the mock recorder for MockGitBranchGetter.
type MockGitBranchGetterMockRecorder struct {
	mock *MockGitBranchGetter
}

// NewMockGitBranchGetter creates a new mock instance.
func NewMockGitBranchGetter(ctrl *gomock.Controller) *MockGitBranchGetter {
	mock := &MockGitBranchGetter{ctrl: ctrl}
	mock.recorder = &MockGitBranchGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBranchGetter) EXPECT() *MockGitBranchGetterMockRecorder {
	return m.recorder
}

// GetGitBranch mocks base method.
func (m *MockGitBranchGetter) GetGitBranch(arg0 context.Context, arg1 v1alpha1.GitRepo, arg2 string) (v1alpha1.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitBranch indicates an expected call of GetGitBranch.
func (mr *MockGitBranchGetterMockRecorder) GetGitBranch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitBranch", reflect.TypeOf((*MockGitBranchGetter)(nil).GetGitBranch), arg0, arg1, arg2)
}

// Path mocks base method.
func (m *MockGitBranchGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitBranchGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitBranchGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitBranchGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitBranchGetterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitBranchGetter)(nil).Setup), arg0, arg1)
}

// MockGitBranchCreator is a mock of GitBranchCreator interface.
type MockGitBranchCreator struct {
	ctrl     *gomock.Controller
	recorder *MockGitBranchCreatorMockRecorder
}

// MockGitBranchCreatorMockRecorder is the mock recorder for MockGitBranchCreator.
type MockGitBranchCreatorMockRecorder struct {
	mock *MockGitBranchCreator
}

// NewMockGitBranchCreator creates a new mock instance.
func NewMockGitBranchCreator(ctrl *gomock.Controller) *MockGitBranchCreator {
	mock := &MockGitBranchCreator{ctrl: ctrl}
	mock.recorder = &MockGitBranchCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitBranchCreator) EXPECT() *MockGitBranchCreatorMockRecorder {
	return m.recorder
}

// CreateGitBranch mocks base method.
func (m *MockGitBranchCreator) CreateGitBranch(arg0 context.Context, arg1 v1alpha1.CreateBranchPayload) (v1alpha1.GitBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGitBranch", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.GitBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGitBranch indicates an expected call of CreateGitBranch.
func (mr *MockGitBranchCreatorMockRecorder) CreateGitBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGitBranch", reflect.TypeOf((*MockGitBranchCreator)(nil).CreateGitBranch), arg0, arg1)
}

// Path mocks base method.
func (m *MockGitBranchCreator) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockGitBranchCreatorMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockGitBranchCreator)(nil).Path))
}

// Setup mocks base method.
func (m *MockGitBranchCreator) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGitBranchCreatorMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGitBranchCreator)(nil).Setup), arg0, arg1)
}
