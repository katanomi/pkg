// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/plugin/types (interfaces: CodeQualityGetter)
//
// Generated by this command:
//
//	mockgen -package=types -destination=../../testing/mock/github.com/katanomi/pkg/plugin/types/code_quality.go github.com/katanomi/pkg/plugin/types CodeQualityGetter
//

// Package types is a generated GoMock package.
package types

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockCodeQualityGetter is a mock of CodeQualityGetter interface.
type MockCodeQualityGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCodeQualityGetterMockRecorder
}

// MockCodeQualityGetterMockRecorder is the mock recorder for MockCodeQualityGetter.
type MockCodeQualityGetterMockRecorder struct {
	mock *MockCodeQualityGetter
}

// NewMockCodeQualityGetter creates a new mock instance.
func NewMockCodeQualityGetter(ctrl *gomock.Controller) *MockCodeQualityGetter {
	mock := &MockCodeQualityGetter{ctrl: ctrl}
	mock.recorder = &MockCodeQualityGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeQualityGetter) EXPECT() *MockCodeQualityGetterMockRecorder {
	return m.recorder
}

// GetCodeQuality mocks base method.
func (m *MockCodeQualityGetter) GetCodeQuality(arg0 context.Context, arg1 string) (*v1alpha1.CodeQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQuality", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CodeQuality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQuality indicates an expected call of GetCodeQuality.
func (mr *MockCodeQualityGetterMockRecorder) GetCodeQuality(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQuality", reflect.TypeOf((*MockCodeQualityGetter)(nil).GetCodeQuality), arg0, arg1)
}

// GetCodeQualityLineCharts mocks base method.
func (m *MockCodeQualityGetter) GetCodeQualityLineCharts(arg0 context.Context, arg1 v1alpha1.CodeQualityLineChartOption) (*v1alpha1.CodeQualityLineChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQualityLineCharts", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CodeQualityLineChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQualityLineCharts indicates an expected call of GetCodeQualityLineCharts.
func (mr *MockCodeQualityGetterMockRecorder) GetCodeQualityLineCharts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQualityLineCharts", reflect.TypeOf((*MockCodeQualityGetter)(nil).GetCodeQualityLineCharts), arg0, arg1)
}

// GetCodeQualityOverviewByBranch mocks base method.
func (m *MockCodeQualityGetter) GetCodeQualityOverviewByBranch(arg0 context.Context, arg1 v1alpha1.CodeQualityBaseOption) (*v1alpha1.CodeQuality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodeQualityOverviewByBranch", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CodeQuality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCodeQualityOverviewByBranch indicates an expected call of GetCodeQualityOverviewByBranch.
func (mr *MockCodeQualityGetterMockRecorder) GetCodeQualityOverviewByBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodeQualityOverviewByBranch", reflect.TypeOf((*MockCodeQualityGetter)(nil).GetCodeQualityOverviewByBranch), arg0, arg1)
}

// GetOverview mocks base method.
func (m *MockCodeQualityGetter) GetOverview(arg0 context.Context) (*v1alpha1.CodeQualityProjectOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverview", arg0)
	ret0, _ := ret[0].(*v1alpha1.CodeQualityProjectOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverview indicates an expected call of GetOverview.
func (mr *MockCodeQualityGetterMockRecorder) GetOverview(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverview", reflect.TypeOf((*MockCodeQualityGetter)(nil).GetOverview), arg0)
}

// GetSummaryByTaskID mocks base method.
func (m *MockCodeQualityGetter) GetSummaryByTaskID(arg0 context.Context, arg1 v1alpha1.CodeQualityTaskOption) (*v1alpha1.CodeQualityTaskMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryByTaskID", arg0, arg1)
	ret0, _ := ret[0].(*v1alpha1.CodeQualityTaskMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryByTaskID indicates an expected call of GetSummaryByTaskID.
func (mr *MockCodeQualityGetterMockRecorder) GetSummaryByTaskID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryByTaskID", reflect.TypeOf((*MockCodeQualityGetter)(nil).GetSummaryByTaskID), arg0, arg1)
}

// Path mocks base method.
func (m *MockCodeQualityGetter) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockCodeQualityGetterMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockCodeQualityGetter)(nil).Path))
}

// Setup mocks base method.
func (m *MockCodeQualityGetter) Setup(arg0 context.Context, arg1 *zap.SugaredLogger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockCodeQualityGetterMockRecorder) Setup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockCodeQualityGetter)(nil).Setup), arg0, arg1)
}
