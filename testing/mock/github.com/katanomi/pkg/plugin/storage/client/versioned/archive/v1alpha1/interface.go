// Code generated by MockGen. DO NOT EDIT.
// Source: archive.go
//
// Generated by this command:
//
//	mockgen -source=archive.go -destination=../../../../../../testing/mock/github.com/katanomi/pkg/plugin/storage/client/versioned/archive/v1alpha1/interface.go -package=v1alpha1 ArchiveInterface
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/katanomi/pkg/apis/archive/v1alpha1"
	v1alpha10 "github.com/katanomi/pkg/plugin/storage/client/versioned/archive/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockRecordGetter is a mock of RecordGetter interface.
type MockRecordGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRecordGetterMockRecorder
}

// MockRecordGetterMockRecorder is the mock recorder for MockRecordGetter.
type MockRecordGetterMockRecorder struct {
	mock *MockRecordGetter
}

// NewMockRecordGetter creates a new mock instance.
func NewMockRecordGetter(ctrl *gomock.Controller) *MockRecordGetter {
	mock := &MockRecordGetter{ctrl: ctrl}
	mock.recorder = &MockRecordGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordGetter) EXPECT() *MockRecordGetterMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockRecordGetter) Record(pluginName string) v1alpha10.RecordInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", pluginName)
	ret0, _ := ret[0].(v1alpha10.RecordInterface)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockRecordGetterMockRecorder) Record(pluginName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockRecordGetter)(nil).Record), pluginName)
}

// MockRecordInterface is a mock of RecordInterface interface.
type MockRecordInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRecordInterfaceMockRecorder
}

// MockRecordInterfaceMockRecorder is the mock recorder for MockRecordInterface.
type MockRecordInterfaceMockRecorder struct {
	mock *MockRecordInterface
}

// NewMockRecordInterface creates a new mock instance.
func NewMockRecordInterface(ctrl *gomock.Controller) *MockRecordInterface {
	mock := &MockRecordInterface{ctrl: ctrl}
	mock.recorder = &MockRecordInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordInterface) EXPECT() *MockRecordInterfaceMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockRecordInterface) Aggregate(ctx context.Context, aggs v1alpha1.AggregateQuery, opts *v1alpha1.ListOptions) (*v1alpha1.AggregateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, aggs, opts)
	ret0, _ := ret[0].(*v1alpha1.AggregateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockRecordInterfaceMockRecorder) Aggregate(ctx, aggs, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockRecordInterface)(nil).Aggregate), ctx, aggs, opts)
}

// Delete mocks base method.
func (m *MockRecordInterface) Delete(ctx context.Context, cluster, uid string, opts *v1alpha1.DeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cluster, uid, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordInterfaceMockRecorder) Delete(ctx, cluster, uid, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordInterface)(nil).Delete), ctx, cluster, uid, opts)
}

// DeleteBatch mocks base method.
func (m *MockRecordInterface) DeleteBatch(ctx context.Context, conditions []v1alpha1.Condition, opts *v1alpha1.DeleteOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, conditions, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockRecordInterfaceMockRecorder) DeleteBatch(ctx, conditions, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockRecordInterface)(nil).DeleteBatch), ctx, conditions, opts)
}

// ListRecords mocks base method.
func (m *MockRecordInterface) ListRecords(ctx context.Context, query v1alpha1.Query, opts *v1alpha1.ListOptions) (*v1alpha1.RecordList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", ctx, query, opts)
	ret0, _ := ret[0].(*v1alpha1.RecordList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockRecordInterfaceMockRecorder) ListRecords(ctx, query, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockRecordInterface)(nil).ListRecords), ctx, query, opts)
}

// ListRelatedRecords mocks base method.
func (m *MockRecordInterface) ListRelatedRecords(ctx context.Context, query v1alpha1.Query, opts *v1alpha1.ListOptions) (*v1alpha1.RecordList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRelatedRecords", ctx, query, opts)
	ret0, _ := ret[0].(*v1alpha1.RecordList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRelatedRecords indicates an expected call of ListRelatedRecords.
func (mr *MockRecordInterfaceMockRecorder) ListRelatedRecords(ctx, query, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRelatedRecords", reflect.TypeOf((*MockRecordInterface)(nil).ListRelatedRecords), ctx, query, opts)
}

// Upsert mocks base method.
func (m *MockRecordInterface) Upsert(ctx context.Context, record *v1alpha1.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRecordInterfaceMockRecorder) Upsert(ctx, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRecordInterface)(nil).Upsert), ctx, record)
}
