// Code generated by MockGen. DO NOT EDIT.
// Source: filestore_client.go

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/katanomi/pkg/plugin/storage/client"
	v1alpha1 "github.com/katanomi/pkg/plugin/storage/client/versioned/filestore/v1alpha1"
)

// MockFileStoreV1alpha1Interface is a mock of FileStoreV1alpha1Interface interface.
type MockFileStoreV1alpha1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreV1alpha1InterfaceMockRecorder
}

// MockFileStoreV1alpha1InterfaceMockRecorder is the mock recorder for MockFileStoreV1alpha1Interface.
type MockFileStoreV1alpha1InterfaceMockRecorder struct {
	mock *MockFileStoreV1alpha1Interface
}

// NewMockFileStoreV1alpha1Interface creates a new mock instance.
func NewMockFileStoreV1alpha1Interface(ctrl *gomock.Controller) *MockFileStoreV1alpha1Interface {
	mock := &MockFileStoreV1alpha1Interface{ctrl: ctrl}
	mock.recorder = &MockFileStoreV1alpha1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStoreV1alpha1Interface) EXPECT() *MockFileStoreV1alpha1InterfaceMockRecorder {
	return m.recorder
}

// FileMeta mocks base method.
func (m *MockFileStoreV1alpha1Interface) FileMeta(pluginName string) v1alpha1.FileMetaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileMeta", pluginName)
	ret0, _ := ret[0].(v1alpha1.FileMetaInterface)
	return ret0
}

// FileMeta indicates an expected call of FileMeta.
func (mr *MockFileStoreV1alpha1InterfaceMockRecorder) FileMeta(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileMeta", reflect.TypeOf((*MockFileStoreV1alpha1Interface)(nil).FileMeta), pluginName)
}

// FileObject mocks base method.
func (m *MockFileStoreV1alpha1Interface) FileObject(pluginName string) v1alpha1.FileObjectInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileObject", pluginName)
	ret0, _ := ret[0].(v1alpha1.FileObjectInterface)
	return ret0
}

// FileObject indicates an expected call of FileObject.
func (mr *MockFileStoreV1alpha1InterfaceMockRecorder) FileObject(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileObject", reflect.TypeOf((*MockFileStoreV1alpha1Interface)(nil).FileObject), pluginName)
}

// RESTClient mocks base method.
func (m *MockFileStoreV1alpha1Interface) RESTClient() client.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(client.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockFileStoreV1alpha1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockFileStoreV1alpha1Interface)(nil).RESTClient))
}

// MockFileObjectGetter is a mock of FileObjectGetter interface.
type MockFileObjectGetter struct {
	ctrl     *gomock.Controller
	recorder *MockFileObjectGetterMockRecorder
}

// MockFileObjectGetterMockRecorder is the mock recorder for MockFileObjectGetter.
type MockFileObjectGetterMockRecorder struct {
	mock *MockFileObjectGetter
}

// NewMockFileObjectGetter creates a new mock instance.
func NewMockFileObjectGetter(ctrl *gomock.Controller) *MockFileObjectGetter {
	mock := &MockFileObjectGetter{ctrl: ctrl}
	mock.recorder = &MockFileObjectGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileObjectGetter) EXPECT() *MockFileObjectGetterMockRecorder {
	return m.recorder
}

// FileObject mocks base method.
func (m *MockFileObjectGetter) FileObject(pluginName string) v1alpha1.FileObjectInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileObject", pluginName)
	ret0, _ := ret[0].(v1alpha1.FileObjectInterface)
	return ret0
}

// FileObject indicates an expected call of FileObject.
func (mr *MockFileObjectGetterMockRecorder) FileObject(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileObject", reflect.TypeOf((*MockFileObjectGetter)(nil).FileObject), pluginName)
}

// MockFileMetaGetter is a mock of FileMetaGetter interface.
type MockFileMetaGetter struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetaGetterMockRecorder
}

// MockFileMetaGetterMockRecorder is the mock recorder for MockFileMetaGetter.
type MockFileMetaGetterMockRecorder struct {
	mock *MockFileMetaGetter
}

// NewMockFileMetaGetter creates a new mock instance.
func NewMockFileMetaGetter(ctrl *gomock.Controller) *MockFileMetaGetter {
	mock := &MockFileMetaGetter{ctrl: ctrl}
	mock.recorder = &MockFileMetaGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMetaGetter) EXPECT() *MockFileMetaGetterMockRecorder {
	return m.recorder
}

// FileMeta mocks base method.
func (m *MockFileMetaGetter) FileMeta(pluginName string) v1alpha1.FileMetaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileMeta", pluginName)
	ret0, _ := ret[0].(v1alpha1.FileMetaInterface)
	return ret0
}

// FileMeta indicates an expected call of FileMeta.
func (mr *MockFileMetaGetterMockRecorder) FileMeta(pluginName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileMeta", reflect.TypeOf((*MockFileMetaGetter)(nil).FileMeta), pluginName)
}
