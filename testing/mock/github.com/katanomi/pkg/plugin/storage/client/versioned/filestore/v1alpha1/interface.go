// Code generated by MockGen. DO NOT EDIT.
// Source: fileobject.go

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/storage/v1alpha1"
	client "github.com/katanomi/pkg/plugin/client"
	v1alpha10 "github.com/katanomi/pkg/plugin/storage/capabilities/filestore/v1alpha1"
)

// MockFileObjectInterface is a mock of FileObjectInterface interface.
type MockFileObjectInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFileObjectInterfaceMockRecorder
}

// MockFileObjectInterfaceMockRecorder is the mock recorder for MockFileObjectInterface.
type MockFileObjectInterfaceMockRecorder struct {
	mock *MockFileObjectInterface
}

// NewMockFileObjectInterface creates a new mock instance.
func NewMockFileObjectInterface(ctrl *gomock.Controller) *MockFileObjectInterface {
	mock := &MockFileObjectInterface{ctrl: ctrl}
	mock.recorder = &MockFileObjectInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileObjectInterface) EXPECT() *MockFileObjectInterfaceMockRecorder {
	return m.recorder
}

// DELETE mocks base method.
func (m *MockFileObjectInterface) DELETE(ctx context.Context, fileObjectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", ctx, fileObjectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DELETE indicates an expected call of DELETE.
func (mr *MockFileObjectInterfaceMockRecorder) DELETE(ctx, fileObjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockFileObjectInterface)(nil).DELETE), ctx, fileObjectName)
}

// GET mocks base method.
func (m *MockFileObjectInterface) GET(ctx context.Context, fileObjectName string) (*v1alpha10.FileObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", ctx, fileObjectName)
	ret0, _ := ret[0].(*v1alpha10.FileObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET.
func (mr *MockFileObjectInterfaceMockRecorder) GET(ctx, fileObjectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockFileObjectInterface)(nil).GET), ctx, fileObjectName)
}

// PUT mocks base method.
func (m *MockFileObjectInterface) PUT(ctx context.Context, fileObj v1alpha10.FileObject, options ...client.OptionFunc) (*v1alpha1.FileMeta, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, fileObj}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PUT", varargs...)
	ret0, _ := ret[0].(*v1alpha1.FileMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PUT indicates an expected call of PUT.
func (mr *MockFileObjectInterfaceMockRecorder) PUT(ctx, fileObj interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, fileObj}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockFileObjectInterface)(nil).PUT), varargs...)
}
