// Code generated by MockGen. DO NOT EDIT.
// Source: gitcontent.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	client "github.com/katanomi/pkg/plugin/client"
	v1 "knative.dev/pkg/apis/duck/v1"
)

// MockClientGitContent is a mock of ClientGitContent interface.
type MockClientGitContent struct {
	ctrl     *gomock.Controller
	recorder *MockClientGitContentMockRecorder
}

// MockClientGitContentMockRecorder is the mock recorder for MockClientGitContent.
type MockClientGitContentMockRecorder struct {
	mock *MockClientGitContent
}

// NewMockClientGitContent creates a new mock instance.
func NewMockClientGitContent(ctrl *gomock.Controller) *MockClientGitContent {
	mock := &MockClientGitContent{ctrl: ctrl}
	mock.recorder = &MockClientGitContentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientGitContent) EXPECT() *MockClientGitContentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientGitContent) Create(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.CreateRepoFilePayload, options ...client.OptionFunc) (*v1alpha1.GitCommit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientGitContentMockRecorder) Create(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientGitContent)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockClientGitContent) Get(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitRepoFileOption, options ...client.OptionFunc) (*v1alpha1.GitRepoFile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitRepoFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientGitContentMockRecorder) Get(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientGitContent)(nil).Get), varargs...)
}
