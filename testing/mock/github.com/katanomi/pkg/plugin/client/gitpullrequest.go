// Code generated by MockGen. DO NOT EDIT.
// Source: gitpullrequest.go

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/katanomi/pkg/apis/meta/v1alpha1"
	client "github.com/katanomi/pkg/plugin/client"
	v1 "knative.dev/pkg/apis/duck/v1"
)

// MockClientGitPullRequest is a mock of ClientGitPullRequest interface.
type MockClientGitPullRequest struct {
	ctrl     *gomock.Controller
	recorder *MockClientGitPullRequestMockRecorder
}

// MockClientGitPullRequestMockRecorder is the mock recorder for MockClientGitPullRequest.
type MockClientGitPullRequestMockRecorder struct {
	mock *MockClientGitPullRequest
}

// NewMockClientGitPullRequest creates a new mock instance.
func NewMockClientGitPullRequest(ctrl *gomock.Controller) *MockClientGitPullRequest {
	mock := &MockClientGitPullRequest{ctrl: ctrl}
	mock.recorder = &MockClientGitPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientGitPullRequest) EXPECT() *MockClientGitPullRequestMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientGitPullRequest) Create(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.CreatePullRequestPayload, options ...client.OptionFunc) (*v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClientGitPullRequestMockRecorder) Create(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientGitPullRequest)(nil).Create), varargs...)
}

// CreateNote mocks base method.
func (m *MockClientGitPullRequest) CreateNote(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.CreatePullRequestCommentPayload, options ...client.OptionFunc) (*v1alpha1.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNote", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockClientGitPullRequestMockRecorder) CreateNote(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockClientGitPullRequest)(nil).CreateNote), varargs...)
}

// Get mocks base method.
func (m *MockClientGitPullRequest) Get(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientGitPullRequestMockRecorder) Get(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientGitPullRequest)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockClientGitPullRequest) List(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestListOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientGitPullRequestMockRecorder) List(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientGitPullRequest)(nil).List), varargs...)
}

// ListNote mocks base method.
func (m *MockClientGitPullRequest) ListNote(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequestNoteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNote", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestNoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNote indicates an expected call of ListNote.
func (mr *MockClientGitPullRequestMockRecorder) ListNote(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNote", reflect.TypeOf((*MockClientGitPullRequest)(nil).ListNote), varargs...)
}

// MockGitPullRequestCRUClient is a mock of GitPullRequestCRUClient interface.
type MockGitPullRequestCRUClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitPullRequestCRUClientMockRecorder
}

// MockGitPullRequestCRUClientMockRecorder is the mock recorder for MockGitPullRequestCRUClient.
type MockGitPullRequestCRUClientMockRecorder struct {
	mock *MockGitPullRequestCRUClient
}

// NewMockGitPullRequestCRUClient creates a new mock instance.
func NewMockGitPullRequestCRUClient(ctrl *gomock.Controller) *MockGitPullRequestCRUClient {
	mock := &MockGitPullRequestCRUClient{ctrl: ctrl}
	mock.recorder = &MockGitPullRequestCRUClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPullRequestCRUClient) EXPECT() *MockGitPullRequestCRUClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGitPullRequestCRUClient) Create(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.CreatePullRequestPayload, options ...client.OptionFunc) (*v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGitPullRequestCRUClientMockRecorder) Create(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).Create), varargs...)
}

// CreateNote mocks base method.
func (m *MockGitPullRequestCRUClient) CreateNote(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.CreatePullRequestCommentPayload, options ...client.OptionFunc) (*v1alpha1.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNote", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockGitPullRequestCRUClientMockRecorder) CreateNote(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).CreateNote), varargs...)
}

// Get mocks base method.
func (m *MockGitPullRequestCRUClient) Get(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequest, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGitPullRequestCRUClientMockRecorder) Get(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockGitPullRequestCRUClient) List(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestListOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequestList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGitPullRequestCRUClientMockRecorder) List(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).List), varargs...)
}

// ListNote mocks base method.
func (m *MockGitPullRequestCRUClient) ListNote(ctx context.Context, baseURL *v1.Addressable, option v1alpha1.GitPullRequestOption, options ...client.OptionFunc) (*v1alpha1.GitPullRequestNoteList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, option}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNote", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestNoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNote indicates an expected call of ListNote.
func (mr *MockGitPullRequestCRUClientMockRecorder) ListNote(ctx, baseURL, option interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, option}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNote", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).ListNote), varargs...)
}

// UpdateNote mocks base method.
func (m *MockGitPullRequestCRUClient) UpdateNote(ctx context.Context, baseURL *v1.Addressable, payload v1alpha1.UpdatePullRequestCommentPayload, options ...client.OptionFunc) (*v1alpha1.GitPullRequestNote, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, baseURL, payload}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNote", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GitPullRequestNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockGitPullRequestCRUClientMockRecorder) UpdateNote(ctx, baseURL, payload interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, baseURL, payload}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockGitPullRequestCRUClient)(nil).UpdateNote), varargs...)
}
