// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/katanomi/pkg/warnings/condition (interfaces: WarningConditionManager)

// Package warnings is a generated GoMock package.
package warnings

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	warnings "github.com/katanomi/pkg/warnings"
	apis "knative.dev/pkg/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockWarningConditionManager is a mock of WarningConditionManager interface.
type MockWarningConditionManager struct {
	ctrl     *gomock.Controller
	recorder *MockWarningConditionManagerMockRecorder
}

// MockWarningConditionManagerMockRecorder is the mock recorder for MockWarningConditionManager.
type MockWarningConditionManagerMockRecorder struct {
	mock *MockWarningConditionManager
}

// NewMockWarningConditionManager creates a new mock instance.
func NewMockWarningConditionManager(ctrl *gomock.Controller) *MockWarningConditionManager {
	mock := &MockWarningConditionManager{ctrl: ctrl}
	mock.recorder = &MockWarningConditionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarningConditionManager) EXPECT() *MockWarningConditionManagerMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockWarningConditionManager) GetObject() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// GetObject indicates an expected call of GetObject.
func (mr *MockWarningConditionManagerMockRecorder) GetObject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockWarningConditionManager)(nil).GetObject))
}

// GetWarningCondition mocks base method.
func (m *MockWarningConditionManager) GetWarningCondition() *apis.Condition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarningCondition")
	ret0, _ := ret[0].(*apis.Condition)
	return ret0
}

// GetWarningCondition indicates an expected call of GetWarningCondition.
func (mr *MockWarningConditionManagerMockRecorder) GetWarningCondition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarningCondition", reflect.TypeOf((*MockWarningConditionManager)(nil).GetWarningCondition))
}

// MarkUniqueWarning mocks base method.
func (m *MockWarningConditionManager) MarkUniqueWarning(arg0 *warnings.WarningRecord) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkUniqueWarning", arg0)
}

// MarkUniqueWarning indicates an expected call of MarkUniqueWarning.
func (mr *MockWarningConditionManagerMockRecorder) MarkUniqueWarning(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUniqueWarning", reflect.TypeOf((*MockWarningConditionManager)(nil).MarkUniqueWarning), arg0)
}
