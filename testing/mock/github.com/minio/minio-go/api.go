// Code generated by MockGen. DO NOT EDIT.
// Source: minio.go

// Package pkg is a generated GoMock package.
package pkg

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
	minio "github.com/minio/minio-go/v7"
	tags "github.com/minio/minio-go/v7/pkg/tags"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockClient) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockClientMockRecorder) BucketExists(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockClient)(nil).BucketExists), ctx, bucketName)
}

// GetBucketLocation mocks base method.
func (m *MockClient) GetBucketLocation(ctx context.Context, bucketName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLocation", ctx, bucketName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLocation indicates an expected call of GetBucketLocation.
func (mr *MockClientMockRecorder) GetBucketLocation(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLocation", reflect.TypeOf((*MockClient)(nil).GetBucketLocation), ctx, bucketName)
}

// GetBucketName mocks base method.
func (m *MockClient) GetBucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketName indicates an expected call of GetBucketName.
func (mr *MockClientMockRecorder) GetBucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketName", reflect.TypeOf((*MockClient)(nil).GetBucketName))
}

// GetObject mocks base method.
func (m *MockClient) GetObject(ctx context.Context, bucketName, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockClientMockRecorder) GetObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockClient)(nil).GetObject), ctx, bucketName, objectName, opts)
}

// GetObjectTagging mocks base method.
func (m *MockClient) GetObjectTagging(ctx context.Context, bucketName, objectName string, opts minio.GetObjectTaggingOptions) (*tags.Tags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTagging", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*tags.Tags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTagging indicates an expected call of GetObjectTagging.
func (mr *MockClientMockRecorder) GetObjectTagging(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTagging", reflect.TypeOf((*MockClient)(nil).GetObjectTagging), ctx, bucketName, objectName, opts)
}

// GetPluginName mocks base method.
func (m *MockClient) GetPluginName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPluginName indicates an expected call of GetPluginName.
func (mr *MockClientMockRecorder) GetPluginName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginName", reflect.TypeOf((*MockClient)(nil).GetPluginName))
}

// HealthCheck mocks base method.
func (m *MockClient) HealthCheck(hcDuration time.Duration) (context.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", hcDuration)
	ret0, _ := ret[0].(context.CancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockClientMockRecorder) HealthCheck(hcDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClient)(nil).HealthCheck), hcDuration)
}

// IsOffline mocks base method.
func (m *MockClient) IsOffline() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOffline")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOffline indicates an expected call of IsOffline.
func (mr *MockClientMockRecorder) IsOffline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOffline", reflect.TypeOf((*MockClient)(nil).IsOffline))
}

// ListBuckets mocks base method.
func (m *MockClient) ListBuckets(ctx context.Context) ([]minio.BucketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", ctx)
	ret0, _ := ret[0].([]minio.BucketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockClientMockRecorder) ListBuckets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockClient)(nil).ListBuckets), ctx)
}

// ListObjects mocks base method.
func (m *MockClient) ListObjects(ctx context.Context, bucketName string, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", ctx, bucketName, opts)
	ret0, _ := ret[0].(<-chan minio.ObjectInfo)
	return ret0
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockClientMockRecorder) ListObjects(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockClient)(nil).ListObjects), ctx, bucketName, opts)
}

// MakeBucket mocks base method.
func (m *MockClient) MakeBucket(ctx context.Context, bucketName string, opts minio.MakeBucketOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockClientMockRecorder) MakeBucket(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockClient)(nil).MakeBucket), ctx, bucketName, opts)
}

// PutObject mocks base method.
func (m *MockClient) PutObject(ctx context.Context, bucketName, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucketName, objectName, reader, objectSize, opts)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockClientMockRecorder) PutObject(ctx, bucketName, objectName, reader, objectSize, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockClient)(nil).PutObject), ctx, bucketName, objectName, reader, objectSize, opts)
}

// RemoveObject mocks base method.
func (m *MockClient) RemoveObject(ctx context.Context, bucketName, objectName string, opts minio.RemoveObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObject indicates an expected call of RemoveObject.
func (mr *MockClientMockRecorder) RemoveObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObject", reflect.TypeOf((*MockClient)(nil).RemoveObject), ctx, bucketName, objectName, opts)
}

// StatObject mocks base method.
func (m *MockClient) StatObject(ctx context.Context, bucketName, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(minio.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatObject indicates an expected call of StatObject.
func (mr *MockClientMockRecorder) StatObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatObject", reflect.TypeOf((*MockClient)(nil).StatObject), ctx, bucketName, objectName, opts)
}

// MockBucketAccessor is a mock of BucketAccessor interface.
type MockBucketAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockBucketAccessorMockRecorder
}

// MockBucketAccessorMockRecorder is the mock recorder for MockBucketAccessor.
type MockBucketAccessorMockRecorder struct {
	mock *MockBucketAccessor
}

// NewMockBucketAccessor creates a new mock instance.
func NewMockBucketAccessor(ctrl *gomock.Controller) *MockBucketAccessor {
	mock := &MockBucketAccessor{ctrl: ctrl}
	mock.recorder = &MockBucketAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucketAccessor) EXPECT() *MockBucketAccessorMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockBucketAccessor) BucketExists(ctx context.Context, bucketName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", ctx, bucketName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockBucketAccessorMockRecorder) BucketExists(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockBucketAccessor)(nil).BucketExists), ctx, bucketName)
}

// GetBucketLocation mocks base method.
func (m *MockBucketAccessor) GetBucketLocation(ctx context.Context, bucketName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketLocation", ctx, bucketName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBucketLocation indicates an expected call of GetBucketLocation.
func (mr *MockBucketAccessorMockRecorder) GetBucketLocation(ctx, bucketName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketLocation", reflect.TypeOf((*MockBucketAccessor)(nil).GetBucketLocation), ctx, bucketName)
}

// GetBucketName mocks base method.
func (m *MockBucketAccessor) GetBucketName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBucketName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBucketName indicates an expected call of GetBucketName.
func (mr *MockBucketAccessorMockRecorder) GetBucketName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBucketName", reflect.TypeOf((*MockBucketAccessor)(nil).GetBucketName))
}

// ListBuckets mocks base method.
func (m *MockBucketAccessor) ListBuckets(ctx context.Context) ([]minio.BucketInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuckets", ctx)
	ret0, _ := ret[0].([]minio.BucketInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuckets indicates an expected call of ListBuckets.
func (mr *MockBucketAccessorMockRecorder) ListBuckets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuckets", reflect.TypeOf((*MockBucketAccessor)(nil).ListBuckets), ctx)
}

// MakeBucket mocks base method.
func (m *MockBucketAccessor) MakeBucket(ctx context.Context, bucketName string, opts minio.MakeBucketOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBucket", ctx, bucketName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBucket indicates an expected call of MakeBucket.
func (mr *MockBucketAccessorMockRecorder) MakeBucket(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBucket", reflect.TypeOf((*MockBucketAccessor)(nil).MakeBucket), ctx, bucketName, opts)
}

// MockClientChecker is a mock of ClientChecker interface.
type MockClientChecker struct {
	ctrl     *gomock.Controller
	recorder *MockClientCheckerMockRecorder
}

// MockClientCheckerMockRecorder is the mock recorder for MockClientChecker.
type MockClientCheckerMockRecorder struct {
	mock *MockClientChecker
}

// NewMockClientChecker creates a new mock instance.
func NewMockClientChecker(ctrl *gomock.Controller) *MockClientChecker {
	mock := &MockClientChecker{ctrl: ctrl}
	mock.recorder = &MockClientCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientChecker) EXPECT() *MockClientCheckerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockClientChecker) HealthCheck(hcDuration time.Duration) (context.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", hcDuration)
	ret0, _ := ret[0].(context.CancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockClientCheckerMockRecorder) HealthCheck(hcDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockClientChecker)(nil).HealthCheck), hcDuration)
}

// IsOffline mocks base method.
func (m *MockClientChecker) IsOffline() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOffline")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOffline indicates an expected call of IsOffline.
func (mr *MockClientCheckerMockRecorder) IsOffline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOffline", reflect.TypeOf((*MockClientChecker)(nil).IsOffline))
}

// MockObjectAccessor is a mock of ObjectAccessor interface.
type MockObjectAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockObjectAccessorMockRecorder
}

// MockObjectAccessorMockRecorder is the mock recorder for MockObjectAccessor.
type MockObjectAccessorMockRecorder struct {
	mock *MockObjectAccessor
}

// NewMockObjectAccessor creates a new mock instance.
func NewMockObjectAccessor(ctrl *gomock.Controller) *MockObjectAccessor {
	mock := &MockObjectAccessor{ctrl: ctrl}
	mock.recorder = &MockObjectAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectAccessor) EXPECT() *MockObjectAccessorMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockObjectAccessor) GetObject(ctx context.Context, bucketName, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*minio.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockObjectAccessorMockRecorder) GetObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockObjectAccessor)(nil).GetObject), ctx, bucketName, objectName, opts)
}

// GetObjectTagging mocks base method.
func (m *MockObjectAccessor) GetObjectTagging(ctx context.Context, bucketName, objectName string, opts minio.GetObjectTaggingOptions) (*tags.Tags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectTagging", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(*tags.Tags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectTagging indicates an expected call of GetObjectTagging.
func (mr *MockObjectAccessorMockRecorder) GetObjectTagging(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectTagging", reflect.TypeOf((*MockObjectAccessor)(nil).GetObjectTagging), ctx, bucketName, objectName, opts)
}

// ListObjects mocks base method.
func (m *MockObjectAccessor) ListObjects(ctx context.Context, bucketName string, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjects", ctx, bucketName, opts)
	ret0, _ := ret[0].(<-chan minio.ObjectInfo)
	return ret0
}

// ListObjects indicates an expected call of ListObjects.
func (mr *MockObjectAccessorMockRecorder) ListObjects(ctx, bucketName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjects", reflect.TypeOf((*MockObjectAccessor)(nil).ListObjects), ctx, bucketName, opts)
}

// PutObject mocks base method.
func (m *MockObjectAccessor) PutObject(ctx context.Context, bucketName, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, bucketName, objectName, reader, objectSize, opts)
	ret0, _ := ret[0].(minio.UploadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockObjectAccessorMockRecorder) PutObject(ctx, bucketName, objectName, reader, objectSize, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockObjectAccessor)(nil).PutObject), ctx, bucketName, objectName, reader, objectSize, opts)
}

// RemoveObject mocks base method.
func (m *MockObjectAccessor) RemoveObject(ctx context.Context, bucketName, objectName string, opts minio.RemoveObjectOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveObject indicates an expected call of RemoveObject.
func (mr *MockObjectAccessorMockRecorder) RemoveObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveObject", reflect.TypeOf((*MockObjectAccessor)(nil).RemoveObject), ctx, bucketName, objectName, opts)
}

// StatObject mocks base method.
func (m *MockObjectAccessor) StatObject(ctx context.Context, bucketName, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatObject", ctx, bucketName, objectName, opts)
	ret0, _ := ret[0].(minio.ObjectInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatObject indicates an expected call of StatObject.
func (mr *MockObjectAccessorMockRecorder) StatObject(ctx, bucketName, objectName, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatObject", reflect.TypeOf((*MockObjectAccessor)(nil).StatObject), ctx, bucketName, objectName, opts)
}
