###################################################
### WARNING: This file is synced from katanomi/hack
### DO NOT CHANGE IT MANUALLY
###################################################
apiVersion: builds.katanomi.dev/v1alpha1
kind: Build
spec:
  workspaces:
    - description: >
        This workspace is shared among all the pipeline tasks to read/write
        common resources
      name: source
    - description: |
        Cache for go modules
      name: cache
      optional: true
  tasks:
    - name: boilerplate
      retries: 0
      taskRef:
        name: katanomi-boilerplate
        kind: ClusterTask
      workspaces:
        - name: source
          workspace: source
      params:
        - name: revision
          value: $(params.git-revision)
    - name: donotsubmit
      runAfter:
        - boilerplate
      retries: 0
      taskRef:
        name: katanomi-donotsubmit
        kind: ClusterTask
      workspaces:
        - name: source
          workspace: source
      params:
        - name: revision
          value: $(params.git-revision)
    - name: knative-style
      runAfter:
        - donotsubmit
      retries: 0
      taskRef:
        name: katanomi-knative-style
        kind: ClusterTask
      workspaces:
        - name: source
          workspace: source
      params:
        - name: ignore-filetypes
          value: (\.png|\.drawio|\.DS_Store)$
        - name: ignore-dirs
          value: (^vendor/|^third_party/|^.git|kodata)
        - name: revision
          value: $(params.git-revision)
    - name: test
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: go-unit-test
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      params:
        - name: command
          value: |
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
            export GOMAXPROCS=4
            if [ "$GOCACHE" != "" ]; then
              export TOOLBIN=$GOCACHE/../toolbin
              mkdir -p $TOOLBIN
              ls -la $TOOLBIN
            fi

            go mod download

            make test
        - name: test-report-path
          value: ./test.json
        - name: coverage-report-path
          value: ./cover.out
        - name: quality-gate-rules
          value:
            - passed-tests-rate=100
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go-121:latest
    - name: golangci-lint
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: golangci-lint
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      params:
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go-121:latest
        - name: command
          value: >
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct

            golangci-lint run

        - name: report-path
          value: ./golangci-lint-report.txt
        - name: quality-gate
          value: "false"
    - name: sonar-scan
      runAfter:
        - test
        - golangci-lint
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: sonarqube-analysis
      workspaces:
        - name: source
          workspace: source
      params:
        - name: server
          value: https://build-sonar.alauda.cn
    ### security scan
    - name: govulncheck
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: go-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: command
          value: |
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
            export GOMAXPROCS=4
            if [ "$GOCACHE" != "" ]; then
              export TOOLBIN=$GOCACHE/../toolbin
              mkdir -p $TOOLBIN
              ls -la $TOOLBIN
            fi

            mkdir -p bin
            export VULNCHECK_OUTPUT=bin/vulncheck.txt
            # do not throw an error here immediately, but check whether it should fail in the subsequent logic
            make vulncheck || true
            # count means the line number which contains 'Fixed in' and has fix version
            count=$(grep 'Fixed in' "$VULNCHECK_OUTPUT" | grep -v 'Fixed in: N/A' | wc -l)
            if [ "$count" -gt 0 ]; then
            echo "==> ❌ there are $count vulnerability need to be fixed"
            exit 1
            else
            echo "==> ✅ there is no vulnerability need to be fixed"
            fi
            # TODO: Add report back to PR
        - name: build-outputs-path
          value:
          - "./bin/vulncheck.txt"

        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go-121:latest
    ### security scan
    - name: trivy-repo-scan
      timeout: 30m
      retries: 0
      taskRef:
        kind: ClusterTask
        name: go-build
      workspaces:
        - name: source
          workspace: source
        - name: cache
          workspace: cache
      when:
      - input: $(build.git.revision.type)
        operator: in
        values:
        - "PullRequest"
      params:
        - name: command
          value: |
            export GOPROXY=https://build-nexus.alauda.cn/repository/golang/,direct
            export GOMAXPROCS=4
            if [ "$GOCACHE" != "" ]; then
              export TOOLBIN=$GOCACHE/../toolbin
              mkdir -p $TOOLBIN
              ls -la $TOOLBIN
            fi

            mkdir -p bin
            export TRIVY_CACHE=$GOCACHE/trivydb
            export TRIVY_DB_REPO=build-harbor.alauda.cn/ops/aquasecurity/trivy-db
            export TRIVY_REPORT_OUTPUT=bin/trivy-report.json
            export TRIVY_SEVERITY=UNKNOWN,MEDIUM,HIGH,CRITICAL
            make trivy-repo-scan
            # TODO: Add report back to PR
        - name: build-outputs-path
          value:
          - "./bin/trivy-report.json"
        - name: tool-image
          value: registry.alauda.cn:60080/devops/builder-go-121:latest
  runTemplate:
    spec:
      taskRunSpecs:
        - pipelineTaskName: test
          stepOverrides:
            - name: prepare
              resources:
                limits:
                  cpu: 100m
                  memory: 100Mi
                requests:
                  cpu: 50m
                  memory: 50Mi
            - name: test
              resources:
                requests:
                  cpu: "4"
                  memory: 3Gi
                limits:
                  cpu: "4"
                  memory: 3Gi
            - name: analysis
              resources:
                limits:
                  cpu: 100m
                  memory: 100Mi
                requests:
                  cpu: 50m
                  memory: 50Mi
        - pipelineTaskName: govulncheck
          stepOverrides:
            - name: go-build
              resources:
                requests:
                  cpu: "4"
                  memory: 6Gi
                limits:
                  cpu: "4"
                  memory: 6Gi
        - pipelineTaskName: trivy-repo-scan
          stepOverrides:
            - name: go-build
              resources:
                requests:
                  cpu: "1"
                  memory: 1Gi
                limits:
                  cpu: "1"
                  memory: 1Gi
